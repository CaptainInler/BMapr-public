//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace BMapr.GDAL.WebApi.NSwag
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClassObj
    {
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HashTableObj Metadata { get; set; }

        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HashTableObj Validation { get; set; }

        [Newtonsoft.Json.JsonProperty("numstyles", Required = Newtonsoft.Json.Required.Always)]
        public int Numstyles { get; set; }

        [Newtonsoft.Json.JsonProperty("numlabels", Required = Newtonsoft.Json.Required.Always)]
        public int Numlabels { get; set; }

        [Newtonsoft.Json.JsonProperty("refcount", Required = Newtonsoft.Json.Required.Always)]
        public int Refcount { get; set; }

        [Newtonsoft.Json.JsonProperty("layer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LayerObj Layer { get; set; }

        [Newtonsoft.Json.JsonProperty("leader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LabelLeaderObj Leader { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status { get; set; }

        [Newtonsoft.Json.JsonProperty("isfallback", Required = Newtonsoft.Json.Required.Always)]
        public int Isfallback { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("minscaledenom", Required = Newtonsoft.Json.Required.Always)]
        public double Minscaledenom { get; set; }

        [Newtonsoft.Json.JsonProperty("maxscaledenom", Required = Newtonsoft.Json.Required.Always)]
        public double Maxscaledenom { get; set; }

        [Newtonsoft.Json.JsonProperty("minfeaturesize", Required = Newtonsoft.Json.Required.Always)]
        public int Minfeaturesize { get; set; }

        [Newtonsoft.Json.JsonProperty("debug", Required = Newtonsoft.Json.Required.Always)]
        public int Debug { get; set; }

        [Newtonsoft.Json.JsonProperty("keyimage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Keyimage { get; set; }

        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group { get; set; }

        [Newtonsoft.Json.JsonProperty("sizeunits", Required = Newtonsoft.Json.Required.Always)]
        public int Sizeunits { get; set; }

        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HashTableObj
    {
        [Newtonsoft.Json.JsonProperty("numitems", Required = Newtonsoft.Json.Required.Always)]
        public int Numitems { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LayerObj
    {
        [Newtonsoft.Json.JsonProperty("refcount", Required = Newtonsoft.Json.Required.Always)]
        public int Refcount { get; set; }

        [Newtonsoft.Json.JsonProperty("numclasses", Required = Newtonsoft.Json.Required.Always)]
        public int Numclasses { get; set; }

        [Newtonsoft.Json.JsonProperty("maxclasses", Required = Newtonsoft.Json.Required.Always)]
        public int Maxclasses { get; set; }

        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Always)]
        public int Index { get; set; }

        [Newtonsoft.Json.JsonProperty("map", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MapObj Map { get; set; }

        [Newtonsoft.Json.JsonProperty("numitems", Required = Newtonsoft.Json.Required.Always)]
        public int Numitems { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HashTableObj Metadata { get; set; }

        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HashTableObj Validation { get; set; }

        [Newtonsoft.Json.JsonProperty("bindvals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HashTableObj Bindvals { get; set; }

        [Newtonsoft.Json.JsonProperty("connectionoptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HashTableObj Connectionoptions { get; set; }

        [Newtonsoft.Json.JsonProperty("cluster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClusterObj Cluster { get; set; }

        [Newtonsoft.Json.JsonProperty("extent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RectObj Extent { get; set; }

        [Newtonsoft.Json.JsonProperty("numprocessing", Required = Newtonsoft.Json.Required.Always)]
        public int Numprocessing { get; set; }

        [Newtonsoft.Json.JsonProperty("numjoins", Required = Newtonsoft.Json.Required.Always)]
        public int Numjoins { get; set; }

        [Newtonsoft.Json.JsonProperty("utfdata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SWIGTYPE_p_expressionObj Utfdata { get; set; }

        [Newtonsoft.Json.JsonProperty("compositer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LayerCompositer Compositer { get; set; }

        [Newtonsoft.Json.JsonProperty("classitem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Classitem { get; set; }

        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Header { get; set; }

        [Newtonsoft.Json.JsonProperty("footer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Footer { get; set; }

        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status { get; set; }

        [Newtonsoft.Json.JsonProperty("rendermode", Required = Newtonsoft.Json.Required.Always)]
        public MS_RENDER_MODE Rendermode { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public MS_LAYER_TYPE Type { get; set; }

        [Newtonsoft.Json.JsonProperty("connectiontype", Required = Newtonsoft.Json.Required.Always)]
        public MS_CONNECTION_TYPE Connectiontype { get; set; }

        [Newtonsoft.Json.JsonProperty("tolerance", Required = Newtonsoft.Json.Required.Always)]
        public double Tolerance { get; set; }

        [Newtonsoft.Json.JsonProperty("toleranceunits", Required = Newtonsoft.Json.Required.Always)]
        public int Toleranceunits { get; set; }

        [Newtonsoft.Json.JsonProperty("symbolscaledenom", Required = Newtonsoft.Json.Required.Always)]
        public double Symbolscaledenom { get; set; }

        [Newtonsoft.Json.JsonProperty("minscaledenom", Required = Newtonsoft.Json.Required.Always)]
        public double Minscaledenom { get; set; }

        [Newtonsoft.Json.JsonProperty("maxscaledenom", Required = Newtonsoft.Json.Required.Always)]
        public double Maxscaledenom { get; set; }

        [Newtonsoft.Json.JsonProperty("minfeaturesize", Required = Newtonsoft.Json.Required.Always)]
        public int Minfeaturesize { get; set; }

        [Newtonsoft.Json.JsonProperty("labelminscaledenom", Required = Newtonsoft.Json.Required.Always)]
        public double Labelminscaledenom { get; set; }

        [Newtonsoft.Json.JsonProperty("labelmaxscaledenom", Required = Newtonsoft.Json.Required.Always)]
        public double Labelmaxscaledenom { get; set; }

        [Newtonsoft.Json.JsonProperty("mingeowidth", Required = Newtonsoft.Json.Required.Always)]
        public double Mingeowidth { get; set; }

        [Newtonsoft.Json.JsonProperty("maxgeowidth", Required = Newtonsoft.Json.Required.Always)]
        public double Maxgeowidth { get; set; }

        [Newtonsoft.Json.JsonProperty("sizeunits", Required = Newtonsoft.Json.Required.Always)]
        public int Sizeunits { get; set; }

        [Newtonsoft.Json.JsonProperty("maxfeatures", Required = Newtonsoft.Json.Required.Always)]
        public int Maxfeatures { get; set; }

        [Newtonsoft.Json.JsonProperty("startindex", Required = Newtonsoft.Json.Required.Always)]
        public int Startindex { get; set; }

        [Newtonsoft.Json.JsonProperty("offsite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorObj Offsite { get; set; }

        [Newtonsoft.Json.JsonProperty("transform", Required = Newtonsoft.Json.Required.Always)]
        public int Transform { get; set; }

        [Newtonsoft.Json.JsonProperty("labelcache", Required = Newtonsoft.Json.Required.Always)]
        public int Labelcache { get; set; }

        [Newtonsoft.Json.JsonProperty("postlabelcache", Required = Newtonsoft.Json.Required.Always)]
        public int Postlabelcache { get; set; }

        [Newtonsoft.Json.JsonProperty("labelitem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Labelitem { get; set; }

        [Newtonsoft.Json.JsonProperty("tileitem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tileitem { get; set; }

        [Newtonsoft.Json.JsonProperty("tileindex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tileindex { get; set; }

        [Newtonsoft.Json.JsonProperty("tilesrs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tilesrs { get; set; }

        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Always)]
        public int Units { get; set; }

        [Newtonsoft.Json.JsonProperty("connection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Connection { get; set; }

        [Newtonsoft.Json.JsonProperty("plugin_library", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Plugin_library { get; set; }

        [Newtonsoft.Json.JsonProperty("plugin_library_original", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Plugin_library_original { get; set; }

        [Newtonsoft.Json.JsonProperty("bandsitem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bandsitem { get; set; }

        [Newtonsoft.Json.JsonProperty("filteritem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Filteritem { get; set; }

        [Newtonsoft.Json.JsonProperty("styleitem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Styleitem { get; set; }

        [Newtonsoft.Json.JsonProperty("requires", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Requires { get; set; }

        [Newtonsoft.Json.JsonProperty("labelrequires", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Labelrequires { get; set; }

        [Newtonsoft.Json.JsonProperty("debug", Required = Newtonsoft.Json.Required.Always)]
        public int Debug { get; set; }

        [Newtonsoft.Json.JsonProperty("classgroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Classgroup { get; set; }

        [Newtonsoft.Json.JsonProperty("mask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mask { get; set; }

        [Newtonsoft.Json.JsonProperty("encoding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Encoding { get; set; }

        [Newtonsoft.Json.JsonProperty("utfitem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Utfitem { get; set; }

        [Newtonsoft.Json.JsonProperty("utfitemindex", Required = Newtonsoft.Json.Required.Always)]
        public int Utfitemindex { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MapObj
    {
        [Newtonsoft.Json.JsonProperty("refcount", Required = Newtonsoft.Json.Required.Always)]
        public int Refcount { get; set; }

        [Newtonsoft.Json.JsonProperty("numlayers", Required = Newtonsoft.Json.Required.Always)]
        public int Numlayers { get; set; }

        [Newtonsoft.Json.JsonProperty("maxlayers", Required = Newtonsoft.Json.Required.Always)]
        public int Maxlayers { get; set; }

        [Newtonsoft.Json.JsonProperty("configoptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HashTableObj Configoptions { get; set; }

        [Newtonsoft.Json.JsonProperty("symbolset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SymbolSetObj Symbolset { get; set; }

        [Newtonsoft.Json.JsonProperty("fontset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FontSetObj Fontset { get; set; }

        [Newtonsoft.Json.JsonProperty("labelcache", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LabelCacheObj Labelcache { get; set; }

        [Newtonsoft.Json.JsonProperty("numoutputformats", Required = Newtonsoft.Json.Required.Always)]
        public int Numoutputformats { get; set; }

        [Newtonsoft.Json.JsonProperty("outputformat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OutputFormatObj Outputformat { get; set; }

        [Newtonsoft.Json.JsonProperty("imagetype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Imagetype { get; set; }

        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReferenceMapObj Reference { get; set; }

        [Newtonsoft.Json.JsonProperty("scalebar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScalebarObj Scalebar { get; set; }

        [Newtonsoft.Json.JsonProperty("legend", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LegendObj Legend { get; set; }

        [Newtonsoft.Json.JsonProperty("querymap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryMapObj Querymap { get; set; }

        [Newtonsoft.Json.JsonProperty("web", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WebObj Web { get; set; }

        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConfigObj Config { get; set; }

        [Newtonsoft.Json.JsonProperty("datapattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Datapattern { get; set; }

        [Newtonsoft.Json.JsonProperty("templatepattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Templatepattern { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status { get; set; }

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }

        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }

        [Newtonsoft.Json.JsonProperty("maxsize", Required = Newtonsoft.Json.Required.Always)]
        public int Maxsize { get; set; }

        [Newtonsoft.Json.JsonProperty("extent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RectObj Extent { get; set; }

        [Newtonsoft.Json.JsonProperty("cellsize", Required = Newtonsoft.Json.Required.Always)]
        public double Cellsize { get; set; }

        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Always)]
        public MS_UNITS Units { get; set; }

        [Newtonsoft.Json.JsonProperty("scaledenom", Required = Newtonsoft.Json.Required.Always)]
        public double Scaledenom { get; set; }

        [Newtonsoft.Json.JsonProperty("resolution", Required = Newtonsoft.Json.Required.Always)]
        public double Resolution { get; set; }

        [Newtonsoft.Json.JsonProperty("defresolution", Required = Newtonsoft.Json.Required.Always)]
        public double Defresolution { get; set; }

        [Newtonsoft.Json.JsonProperty("shapepath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Shapepath { get; set; }

        [Newtonsoft.Json.JsonProperty("mappath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mappath { get; set; }

        [Newtonsoft.Json.JsonProperty("sldurl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sldurl { get; set; }

        [Newtonsoft.Json.JsonProperty("imagecolor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorObj Imagecolor { get; set; }

        [Newtonsoft.Json.JsonProperty("layerorder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SWIGTYPE_p_int Layerorder { get; set; }

        [Newtonsoft.Json.JsonProperty("debug", Required = Newtonsoft.Json.Required.Always)]
        public int Debug { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SymbolSetObj
    {
        [Newtonsoft.Json.JsonProperty("numsymbols", Required = Newtonsoft.Json.Required.Always)]
        public int Numsymbols { get; set; }

        [Newtonsoft.Json.JsonProperty("maxsymbols", Required = Newtonsoft.Json.Required.Always)]
        public int Maxsymbols { get; set; }

        [Newtonsoft.Json.JsonProperty("filename", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Filename { get; set; }

        [Newtonsoft.Json.JsonProperty("imagecachesize", Required = Newtonsoft.Json.Required.Always)]
        public int Imagecachesize { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FontSetObj
    {
        [Newtonsoft.Json.JsonProperty("filename", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Filename { get; set; }

        [Newtonsoft.Json.JsonProperty("numfonts", Required = Newtonsoft.Json.Required.Always)]
        public int Numfonts { get; set; }

        [Newtonsoft.Json.JsonProperty("fonts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HashTableObj Fonts { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabelCacheObj
    {
        [Newtonsoft.Json.JsonProperty("num_rendered_members", Required = Newtonsoft.Json.Required.Always)]
        public int Num_rendered_members { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutputFormatObj
    {
        [Newtonsoft.Json.JsonProperty("numformatoptions", Required = Newtonsoft.Json.Required.Always)]
        public int Numformatoptions { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("mimetype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mimetype { get; set; }

        [Newtonsoft.Json.JsonProperty("driver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Driver { get; set; }

        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extension { get; set; }

        [Newtonsoft.Json.JsonProperty("renderer", Required = Newtonsoft.Json.Required.Always)]
        public int Renderer { get; set; }

        [Newtonsoft.Json.JsonProperty("imagemode", Required = Newtonsoft.Json.Required.Always)]
        public int Imagemode { get; set; }

        [Newtonsoft.Json.JsonProperty("transparent", Required = Newtonsoft.Json.Required.Always)]
        public int Transparent { get; set; }

        [Newtonsoft.Json.JsonProperty("bands", Required = Newtonsoft.Json.Required.Always)]
        public int Bands { get; set; }

        [Newtonsoft.Json.JsonProperty("inmapfile", Required = Newtonsoft.Json.Required.Always)]
        public int Inmapfile { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReferenceMapObj
    {
        [Newtonsoft.Json.JsonProperty("map", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MapObj Map { get; set; }

        [Newtonsoft.Json.JsonProperty("extent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RectObj Extent { get; set; }

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }

        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorObj Color { get; set; }

        [Newtonsoft.Json.JsonProperty("outlinecolor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorObj Outlinecolor { get; set; }

        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status { get; set; }

        [Newtonsoft.Json.JsonProperty("marker", Required = Newtonsoft.Json.Required.Always)]
        public int Marker { get; set; }

        [Newtonsoft.Json.JsonProperty("markername", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Markername { get; set; }

        [Newtonsoft.Json.JsonProperty("markersize", Required = Newtonsoft.Json.Required.Always)]
        public int Markersize { get; set; }

        [Newtonsoft.Json.JsonProperty("minboxsize", Required = Newtonsoft.Json.Required.Always)]
        public int Minboxsize { get; set; }

        [Newtonsoft.Json.JsonProperty("maxboxsize", Required = Newtonsoft.Json.Required.Always)]
        public int Maxboxsize { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RectObj
    {
        [Newtonsoft.Json.JsonProperty("minx", Required = Newtonsoft.Json.Required.Always)]
        public double Minx { get; set; }

        [Newtonsoft.Json.JsonProperty("miny", Required = Newtonsoft.Json.Required.Always)]
        public double Miny { get; set; }

        [Newtonsoft.Json.JsonProperty("maxx", Required = Newtonsoft.Json.Required.Always)]
        public double Maxx { get; set; }

        [Newtonsoft.Json.JsonProperty("maxy", Required = Newtonsoft.Json.Required.Always)]
        public double Maxy { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ColorObj
    {
        [Newtonsoft.Json.JsonProperty("red", Required = Newtonsoft.Json.Required.Always)]
        public int Red { get; set; }

        [Newtonsoft.Json.JsonProperty("green", Required = Newtonsoft.Json.Required.Always)]
        public int Green { get; set; }

        [Newtonsoft.Json.JsonProperty("blue", Required = Newtonsoft.Json.Required.Always)]
        public int Blue { get; set; }

        [Newtonsoft.Json.JsonProperty("alpha", Required = Newtonsoft.Json.Required.Always)]
        public int Alpha { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScalebarObj
    {
        [Newtonsoft.Json.JsonProperty("transparent", Required = Newtonsoft.Json.Required.Always)]
        public int Transparent { get; set; }

        [Newtonsoft.Json.JsonProperty("imagecolor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorObj Imagecolor { get; set; }

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }

        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }

        [Newtonsoft.Json.JsonProperty("style", Required = Newtonsoft.Json.Required.Always)]
        public int Style { get; set; }

        [Newtonsoft.Json.JsonProperty("intervals", Required = Newtonsoft.Json.Required.Always)]
        public int Intervals { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LabelObj Label { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorObj Color { get; set; }

        [Newtonsoft.Json.JsonProperty("backgroundcolor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorObj Backgroundcolor { get; set; }

        [Newtonsoft.Json.JsonProperty("outlinecolor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorObj Outlinecolor { get; set; }

        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Always)]
        public int Units { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status { get; set; }

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Always)]
        public int Position { get; set; }

        [Newtonsoft.Json.JsonProperty("postlabelcache", Required = Newtonsoft.Json.Required.Always)]
        public int Postlabelcache { get; set; }

        [Newtonsoft.Json.JsonProperty("align", Required = Newtonsoft.Json.Required.Always)]
        public int Align { get; set; }

        [Newtonsoft.Json.JsonProperty("offsetx", Required = Newtonsoft.Json.Required.Always)]
        public int Offsetx { get; set; }

        [Newtonsoft.Json.JsonProperty("offsety", Required = Newtonsoft.Json.Required.Always)]
        public int Offsety { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabelObj
    {
        [Newtonsoft.Json.JsonProperty("refcount", Required = Newtonsoft.Json.Required.Always)]
        public int Refcount { get; set; }

        [Newtonsoft.Json.JsonProperty("font", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Font { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorObj Color { get; set; }

        [Newtonsoft.Json.JsonProperty("outlinecolor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorObj Outlinecolor { get; set; }

        [Newtonsoft.Json.JsonProperty("outlinewidth", Required = Newtonsoft.Json.Required.Always)]
        public int Outlinewidth { get; set; }

        [Newtonsoft.Json.JsonProperty("shadowcolor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorObj Shadowcolor { get; set; }

        [Newtonsoft.Json.JsonProperty("shadowsizex", Required = Newtonsoft.Json.Required.Always)]
        public int Shadowsizex { get; set; }

        [Newtonsoft.Json.JsonProperty("shadowsizey", Required = Newtonsoft.Json.Required.Always)]
        public int Shadowsizey { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Always)]
        public int Size { get; set; }

        [Newtonsoft.Json.JsonProperty("minsize", Required = Newtonsoft.Json.Required.Always)]
        public int Minsize { get; set; }

        [Newtonsoft.Json.JsonProperty("maxsize", Required = Newtonsoft.Json.Required.Always)]
        public int Maxsize { get; set; }

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Always)]
        public int Position { get; set; }

        [Newtonsoft.Json.JsonProperty("offsetx", Required = Newtonsoft.Json.Required.Always)]
        public int Offsetx { get; set; }

        [Newtonsoft.Json.JsonProperty("offsety", Required = Newtonsoft.Json.Required.Always)]
        public int Offsety { get; set; }

        [Newtonsoft.Json.JsonProperty("angle", Required = Newtonsoft.Json.Required.Always)]
        public double Angle { get; set; }

        [Newtonsoft.Json.JsonProperty("anglemode", Required = Newtonsoft.Json.Required.Always)]
        public MS_POSITIONS_ENUM Anglemode { get; set; }

        [Newtonsoft.Json.JsonProperty("buffer", Required = Newtonsoft.Json.Required.Always)]
        public int Buffer { get; set; }

        [Newtonsoft.Json.JsonProperty("align", Required = Newtonsoft.Json.Required.Always)]
        public int Align { get; set; }

        [Newtonsoft.Json.JsonProperty("wrap", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Wrap { get; set; }

        [Newtonsoft.Json.JsonProperty("maxlength", Required = Newtonsoft.Json.Required.Always)]
        public int Maxlength { get; set; }

        [Newtonsoft.Json.JsonProperty("space_size_10", Required = Newtonsoft.Json.Required.Always)]
        public double Space_size_10 { get; set; }

        [Newtonsoft.Json.JsonProperty("minfeaturesize", Required = Newtonsoft.Json.Required.Always)]
        public int Minfeaturesize { get; set; }

        [Newtonsoft.Json.JsonProperty("autominfeaturesize", Required = Newtonsoft.Json.Required.Always)]
        public int Autominfeaturesize { get; set; }

        [Newtonsoft.Json.JsonProperty("minscaledenom", Required = Newtonsoft.Json.Required.Always)]
        public double Minscaledenom { get; set; }

        [Newtonsoft.Json.JsonProperty("maxscaledenom", Required = Newtonsoft.Json.Required.Always)]
        public double Maxscaledenom { get; set; }

        [Newtonsoft.Json.JsonProperty("mindistance", Required = Newtonsoft.Json.Required.Always)]
        public int Mindistance { get; set; }

        [Newtonsoft.Json.JsonProperty("repeatdistance", Required = Newtonsoft.Json.Required.Always)]
        public int Repeatdistance { get; set; }

        [Newtonsoft.Json.JsonProperty("maxoverlapangle", Required = Newtonsoft.Json.Required.Always)]
        public double Maxoverlapangle { get; set; }

        [Newtonsoft.Json.JsonProperty("partials", Required = Newtonsoft.Json.Required.Always)]
        public int Partials { get; set; }

        [Newtonsoft.Json.JsonProperty("force", Required = Newtonsoft.Json.Required.Always)]
        public int Force { get; set; }

        [Newtonsoft.Json.JsonProperty("encoding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Encoding { get; set; }

        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Always)]
        public int Priority { get; set; }

        [Newtonsoft.Json.JsonProperty("numstyles", Required = Newtonsoft.Json.Required.Always)]
        public int Numstyles { get; set; }

        [Newtonsoft.Json.JsonProperty("sizeunits", Required = Newtonsoft.Json.Required.Always)]
        public int Sizeunits { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_POSITIONS_ENUM
    {

        MS_UL = 101,

        MS_LR = 102,

        MS_UR = 103,

        MS_LL = 104,

        MS_CR = 105,

        MS_CL = 106,

        MS_UC = 107,

        MS_LC = 108,

        MS_CC = 109,

        MS_AUTO = 110,

        MS_XY = 111,

        MS_NONE = 112,

        MS_AUTO2 = 113,

        MS_FOLLOW = 114,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LegendObj
    {
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LabelObj Label { get; set; }

        [Newtonsoft.Json.JsonProperty("map", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MapObj Map { get; set; }

        [Newtonsoft.Json.JsonProperty("transparent", Required = Newtonsoft.Json.Required.Always)]
        public int Transparent { get; set; }

        [Newtonsoft.Json.JsonProperty("imagecolor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorObj Imagecolor { get; set; }

        [Newtonsoft.Json.JsonProperty("keysizex", Required = Newtonsoft.Json.Required.Always)]
        public int Keysizex { get; set; }

        [Newtonsoft.Json.JsonProperty("keysizey", Required = Newtonsoft.Json.Required.Always)]
        public int Keysizey { get; set; }

        [Newtonsoft.Json.JsonProperty("keyspacingx", Required = Newtonsoft.Json.Required.Always)]
        public int Keyspacingx { get; set; }

        [Newtonsoft.Json.JsonProperty("keyspacingy", Required = Newtonsoft.Json.Required.Always)]
        public int Keyspacingy { get; set; }

        [Newtonsoft.Json.JsonProperty("outlinecolor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorObj Outlinecolor { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status { get; set; }

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }

        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Always)]
        public int Position { get; set; }

        [Newtonsoft.Json.JsonProperty("postlabelcache", Required = Newtonsoft.Json.Required.Always)]
        public int Postlabelcache { get; set; }

        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QueryMapObj
    {
        [Newtonsoft.Json.JsonProperty("map", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MapObj Map { get; set; }

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }

        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status { get; set; }

        [Newtonsoft.Json.JsonProperty("style", Required = Newtonsoft.Json.Required.Always)]
        public int Style { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorObj Color { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WebObj
    {
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HashTableObj Metadata { get; set; }

        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HashTableObj Validation { get; set; }

        [Newtonsoft.Json.JsonProperty("map", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MapObj Map { get; set; }

        [Newtonsoft.Json.JsonProperty("imagepath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Imagepath { get; set; }

        [Newtonsoft.Json.JsonProperty("imageurl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Imageurl { get; set; }

        [Newtonsoft.Json.JsonProperty("temppath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Temppath { get; set; }

        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Header { get; set; }

        [Newtonsoft.Json.JsonProperty("footer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Footer { get; set; }

        [Newtonsoft.Json.JsonProperty("empty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Empty { get; set; }

        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }

        [Newtonsoft.Json.JsonProperty("minscaledenom", Required = Newtonsoft.Json.Required.Always)]
        public double Minscaledenom { get; set; }

        [Newtonsoft.Json.JsonProperty("maxscaledenom", Required = Newtonsoft.Json.Required.Always)]
        public double Maxscaledenom { get; set; }

        [Newtonsoft.Json.JsonProperty("mintemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mintemplate { get; set; }

        [Newtonsoft.Json.JsonProperty("maxtemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Maxtemplate { get; set; }

        [Newtonsoft.Json.JsonProperty("queryformat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Queryformat { get; set; }

        [Newtonsoft.Json.JsonProperty("legendformat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Legendformat { get; set; }

        [Newtonsoft.Json.JsonProperty("browseformat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Browseformat { get; set; }

        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfigObj
    {
        [Newtonsoft.Json.JsonProperty("env", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HashTableObj Env { get; set; }

        [Newtonsoft.Json.JsonProperty("maps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HashTableObj Maps { get; set; }

        [Newtonsoft.Json.JsonProperty("plugins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HashTableObj Plugins { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_UNITS
    {

        MS_INCHES = 0,

        MS_FEET = 1,

        MS_MILES = 2,

        MS_METERS = 3,

        MS_KILOMETERS = 4,

        MS_DD = 5,

        MS_PIXELS = 6,

        MS_PERCENTAGES = 7,

        MS_NAUTICALMILES = 8,

        MS_INHERIT = -1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SWIGTYPE_p_int
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClusterObj
    {
        [Newtonsoft.Json.JsonProperty("maxdistance", Required = Newtonsoft.Json.Required.Always)]
        public double Maxdistance { get; set; }

        [Newtonsoft.Json.JsonProperty("buffer", Required = Newtonsoft.Json.Required.Always)]
        public double Buffer { get; set; }

        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SWIGTYPE_p_expressionObj
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LayerCompositer
    {
        [Newtonsoft.Json.JsonProperty("comp_op", Required = Newtonsoft.Json.Required.Always)]
        public CompositingOperation Comp_op { get; set; }

        [Newtonsoft.Json.JsonProperty("opacity", Required = Newtonsoft.Json.Required.Always)]
        public int Opacity { get; set; }

        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompositingFilter Filter { get; set; }

        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LayerCompositer Next { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CompositingOperation
    {

        MS_COMPOP_CLEAR = 0,

        MS_COMPOP_SRC = 1,

        MS_COMPOP_DST = 2,

        MS_COMPOP_SRC_OVER = 3,

        MS_COMPOP_DST_OVER = 4,

        MS_COMPOP_SRC_IN = 5,

        MS_COMPOP_DST_IN = 6,

        MS_COMPOP_SRC_OUT = 7,

        MS_COMPOP_DST_OUT = 8,

        MS_COMPOP_SRC_ATOP = 9,

        MS_COMPOP_DST_ATOP = 10,

        MS_COMPOP_XOR = 11,

        MS_COMPOP_PLUS = 12,

        MS_COMPOP_MINUS = 13,

        MS_COMPOP_MULTIPLY = 14,

        MS_COMPOP_SCREEN = 15,

        MS_COMPOP_OVERLAY = 16,

        MS_COMPOP_DARKEN = 17,

        MS_COMPOP_LIGHTEN = 18,

        MS_COMPOP_COLOR_DODGE = 19,

        MS_COMPOP_COLOR_BURN = 20,

        MS_COMPOP_HARD_LIGHT = 21,

        MS_COMPOP_SOFT_LIGHT = 22,

        MS_COMPOP_DIFFERENCE = 23,

        MS_COMPOP_EXCLUSION = 24,

        MS_COMPOP_CONTRAST = 25,

        MS_COMPOP_INVERT = 26,

        MS_COMPOP_INVERT_RGB = 27,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompositingFilter
    {
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Filter { get; set; }

        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompositingFilter Next { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_RENDER_MODE
    {

        MS_FIRST_MATCHING_CLASS = 0,

        MS_ALL_MATCHING_CLASSES = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_LAYER_TYPE
    {

        MS_LAYER_POINT = 0,

        MS_LAYER_LINE = 1,

        MS_LAYER_POLYGON = 2,

        MS_LAYER_RASTER = 3,

        MS_LAYER_ANNOTATION = 4,

        MS_LAYER_QUERY = 5,

        MS_LAYER_CIRCLE = 6,

        MS_LAYER_TILEINDEX = 7,

        MS_LAYER_CHART = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_CONNECTION_TYPE
    {

        MS_INLINE = 0,

        MS_SHAPEFILE = 1,

        MS_TILED_SHAPEFILE = 2,

        MS_UNUSED_2 = 3,

        MS_OGR = 4,

        MS_UNUSED_1 = 5,

        MS_POSTGIS = 6,

        MS_WMS = 7,

        MS_ORACLESPATIAL = 8,

        MS_WFS = 9,

        MS_GRATICULE = 10,

        MS_MYSQL = 11,

        MS_RASTER = 12,

        MS_PLUGIN = 13,

        MS_UNION = 14,

        MS_UVRASTER = 15,

        MS_CONTOUR = 16,

        MS_KERNELDENSITY = 17,

        MS_IDW = 18,

        MS_FLATGEOBUF = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabelLeaderObj
    {
        [Newtonsoft.Json.JsonProperty("numstyles", Required = Newtonsoft.Json.Required.Always)]
        public int Numstyles { get; set; }

        [Newtonsoft.Json.JsonProperty("maxdistance", Required = Newtonsoft.Json.Required.Always)]
        public int Maxdistance { get; set; }

        [Newtonsoft.Json.JsonProperty("gridstep", Required = Newtonsoft.Json.Required.Always)]
        public int Gridstep { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DBFFieldType
    {

        FTString = 0,

        FTInteger = 1,

        FTDouble = 2,

        FTInvalid = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DBFInfo
    {
        [Newtonsoft.Json.JsonProperty("nRecords", Required = Newtonsoft.Json.Required.Always)]
        public int NRecords { get; set; }

        [Newtonsoft.Json.JsonProperty("nFields", Required = Newtonsoft.Json.Required.Always)]
        public int NFields { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DebugLevel
    {

        MS_DEBUGLEVEL_ERRORSONLY = 0,

        MS_DEBUGLEVEL_DEBUG = 1,

        MS_DEBUGLEVEL_TUNING = 2,

        MS_DEBUGLEVEL_V = 3,

        MS_DEBUGLEVEL_VV = 4,

        MS_DEBUGLEVEL_VVV = 5,

        MS_DEBUGLEVEL_DEVDEBUG = 20,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorObj
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        public int Code { get; set; }

        [Newtonsoft.Json.JsonProperty("routine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Routine { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("isreported", Required = Newtonsoft.Json.Required.Always)]
        public int Isreported { get; set; }

        [Newtonsoft.Json.JsonProperty("errorcount", Required = Newtonsoft.Json.Required.Always)]
        public int Errorcount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageObj
    {
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }

        [Newtonsoft.Json.JsonProperty("resolution", Required = Newtonsoft.Json.Required.Always)]
        public double Resolution { get; set; }

        [Newtonsoft.Json.JsonProperty("resolutionfactor", Required = Newtonsoft.Json.Required.Always)]
        public double Resolutionfactor { get; set; }

        [Newtonsoft.Json.JsonProperty("imagepath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Imagepath { get; set; }

        [Newtonsoft.Json.JsonProperty("imageurl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Imageurl { get; set; }

        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OutputFormatObj Format { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Intarray
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabelCacheMemberObj
    {
        [Newtonsoft.Json.JsonProperty("numtextsymbols", Required = Newtonsoft.Json.Required.Always)]
        public int Numtextsymbols { get; set; }

        [Newtonsoft.Json.JsonProperty("layerindex", Required = Newtonsoft.Json.Required.Always)]
        public int Layerindex { get; set; }

        [Newtonsoft.Json.JsonProperty("classindex", Required = Newtonsoft.Json.Required.Always)]
        public int Classindex { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status { get; set; }

        [Newtonsoft.Json.JsonProperty("markerid", Required = Newtonsoft.Json.Required.Always)]
        public int Markerid { get; set; }

        [Newtonsoft.Json.JsonProperty("point", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PointObj Point { get; set; }

        [Newtonsoft.Json.JsonProperty("bbox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RectObj Bbox { get; set; }

        [Newtonsoft.Json.JsonProperty("leaderline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LineObj Leaderline { get; set; }

        [Newtonsoft.Json.JsonProperty("leaderbbox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RectObj Leaderbbox { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PointObj
    {
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Always)]
        public double X { get; set; }

        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Always)]
        public double Y { get; set; }

        [Newtonsoft.Json.JsonProperty("z", Required = Newtonsoft.Json.Required.Always)]
        public double Z { get; set; }

        [Newtonsoft.Json.JsonProperty("m", Required = Newtonsoft.Json.Required.Always)]
        public double M { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LineObj
    {
        [Newtonsoft.Json.JsonProperty("numpoints", Required = Newtonsoft.Json.Required.Always)]
        public int Numpoints { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabelCacheSlotObj
    {
        [Newtonsoft.Json.JsonProperty("numlabels", Required = Newtonsoft.Json.Required.Always)]
        public int Numlabels { get; set; }

        [Newtonsoft.Json.JsonProperty("cachesize", Required = Newtonsoft.Json.Required.Always)]
        public int Cachesize { get; set; }

        [Newtonsoft.Json.JsonProperty("nummarkers", Required = Newtonsoft.Json.Required.Always)]
        public int Nummarkers { get; set; }

        [Newtonsoft.Json.JsonProperty("markercachesize", Required = Newtonsoft.Json.Required.Always)]
        public int Markercachesize { get; set; }

        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LabelCacheMemberObj Labels { get; set; }

        [Newtonsoft.Json.JsonProperty("markers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MarkerCacheMemberObj Markers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarkerCacheMemberObj
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("bounds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RectObj Bounds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mapscript
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_ALIGN_VALUE
    {

        MS_ALIGN_DEFAULT = 0,

        MS_ALIGN_LEFT = 1,

        MS_ALIGN_CENTER = 2,

        MS_ALIGN_RIGHT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_CAPS_JOINS_AND_CORNERS
    {

        MS_CJC_NONE = 0,

        MS_CJC_BEVEL = 1,

        MS_CJC_BUTT = 2,

        MS_CJC_MITER = 3,

        MS_CJC_ROUND = 4,

        MS_CJC_SQUARE = 5,

        MS_CJC_TRIANGLE = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_CONFIG_SECTIONS
    {

        MS_CONFIG_SECTION = 3000,

        MS_CONFIG_SECTION_ENV = 3001,

        MS_CONFIG_SECTION_MAPS = 3002,

        MS_CONFIG_SECTION_PLUGINS = 3003,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_FILE_TYPE
    {

        MS_FILE_MAP = 0,

        MS_FILE_SYMBOL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_FONT_TYPE
    {

        MS_TRUETYPE = 0,

        MS_BITMAP = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_GEOS_OPERATOR
    {

        MS_GEOS_EQUALS = 0,

        MS_GEOS_DISJOINT = 1,

        MS_GEOS_TOUCHES = 2,

        MS_GEOS_OVERLAPS = 3,

        MS_GEOS_CROSSES = 4,

        MS_GEOS_INTERSECTS = 5,

        MS_GEOS_WITHIN = 6,

        MS_GEOS_CONTAINS = 7,

        MS_GEOS_BEYOND = 8,

        MS_GEOS_DWITHIN = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_IMAGEMODE
    {

        MS_IMAGEMODE_PC256 = 0,

        MS_IMAGEMODE_RGB = 1,

        MS_IMAGEMODE_RGBA = 2,

        MS_IMAGEMODE_INT16 = 3,

        MS_IMAGEMODE_FLOAT32 = 4,

        MS_IMAGEMODE_BYTE = 5,

        MS_IMAGEMODE_FEATURE = 6,

        MS_IMAGEMODE_NULL = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_JOIN_CONNECTION_TYPE
    {

        MS_DB_XBASE = 0,

        MS_DB_CSV = 1,

        MS_DB_MYSQL = 2,

        MS_DB_ORACLE = 3,

        MS_DB_POSTGRES = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_JOIN_TYPE
    {

        MS_JOIN_ONE_TO_ONE = 0,

        MS_JOIN_ONE_TO_MANY = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_LABEL_BINDING_ENUM
    {

        MS_LABEL_BINDING_SIZE = 0,

        MS_LABEL_BINDING_ANGLE = 1,

        MS_LABEL_BINDING_COLOR = 2,

        MS_LABEL_BINDING_OUTLINECOLOR = 3,

        MS_LABEL_BINDING_FONT = 4,

        MS_LABEL_BINDING_PRIORITY = 5,

        MS_LABEL_BINDING_POSITION = 6,

        MS_LABEL_BINDING_SHADOWSIZEX = 7,

        MS_LABEL_BINDING_SHADOWSIZEY = 8,

        MS_LABEL_BINDING_OFFSET_X = 9,

        MS_LABEL_BINDING_OFFSET_Y = 10,

        MS_LABEL_BINDING_ALIGN = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_NUM_CHECK_TYPES
    {

        MS_NUM_CHECK_NONE = 0,

        MS_NUM_CHECK_RANGE = 1,

        MS_NUM_CHECK_GT = 2,

        MS_NUM_CHECK_GTE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_PARSE_TYPE_ENUM
    {

        MS_PARSE_TYPE_BOOLEAN = 0,

        MS_PARSE_TYPE_STRING = 1,

        MS_PARSE_TYPE_SHAPE = 2,

        MS_PARSE_TYPE_SLD = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_QUERY_MODE
    {

        MS_QUERY_SINGLE = 0,

        MS_QUERY_MULTIPLE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_QUERY_TYPE
    {

        MS_QUERY_IS_NULL = 0,

        MS_QUERY_BY_POINT = 1,

        MS_QUERY_BY_RECT = 2,

        MS_QUERY_BY_SHAPE = 3,

        MS_QUERY_BY_ATTRIBUTE = 4,

        MS_QUERY_BY_INDEX = 5,

        MS_QUERY_BY_FILTER = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_QUERYMAP_STYLES
    {

        MS_NORMAL = 0,

        MS_HILITE = 1,

        MS_SELECTED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_REQUEST_TYPE
    {

        MS_GET_REQUEST = 0,

        MS_POST_REQUEST = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_RETURN_VALUE
    {

        MS_SUCCESS = 0,

        MS_FAILURE = 1,

        MS_DONE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_SHAPE_TYPE
    {

        MS_SHAPE_POINT = 0,

        MS_SHAPE_LINE = 1,

        MS_SHAPE_POLYGON = 2,

        MS_SHAPE_NULL = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_STYLE_BINDING_ENUM
    {

        MS_STYLE_BINDING_SIZE = 0,

        MS_STYLE_BINDING_WIDTH = 1,

        MS_STYLE_BINDING_ANGLE = 2,

        MS_STYLE_BINDING_COLOR = 3,

        MS_STYLE_BINDING_OUTLINECOLOR = 4,

        MS_STYLE_BINDING_SYMBOL = 5,

        MS_STYLE_BINDING_OUTLINEWIDTH = 6,

        MS_STYLE_BINDING_OPACITY = 7,

        MS_STYLE_BINDING_OFFSET_X = 8,

        MS_STYLE_BINDING_OFFSET_Y = 9,

        MS_STYLE_BINDING_POLAROFFSET_PIXEL = 10,

        MS_STYLE_BINDING_POLAROFFSET_ANGLE = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_TOKEN_BINDING_ENUM
    {

        MS_TOKEN_BINDING_DOUBLE = 380,

        MS_TOKEN_BINDING_INTEGER = 381,

        MS_TOKEN_BINDING_STRING = 382,

        MS_TOKEN_BINDING_TIME = 383,

        MS_TOKEN_BINDING_SHAPE = 384,

        MS_TOKEN_BINDING_MAP_CELLSIZE = 385,

        MS_TOKEN_BINDING_DATA_CELLSIZE = 386,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_SYMBOL_TYPE
    {

        MS_SYMBOL_SIMPLE = 1000,

        MS_SYMBOL_VECTOR = 1001,

        MS_SYMBOL_ELLIPSE = 1002,

        MS_SYMBOL_PIXMAP = 1003,

        MS_SYMBOL_TRUETYPE = 1004,

        MS_SYMBOL_HATCH = 1005,

        MS_SYMBOL_SVG = 1006,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_TOKEN_COMPARISON_ENUM
    {

        MS_TOKEN_COMPARISON_EQ = 320,

        MS_TOKEN_COMPARISON_NE = 321,

        MS_TOKEN_COMPARISON_GT = 322,

        MS_TOKEN_COMPARISON_LT = 323,

        MS_TOKEN_COMPARISON_LE = 324,

        MS_TOKEN_COMPARISON_GE = 325,

        MS_TOKEN_COMPARISON_IEQ = 326,

        MS_TOKEN_COMPARISON_RE = 327,

        MS_TOKEN_COMPARISON_IRE = 328,

        MS_TOKEN_COMPARISON_IN = 329,

        MS_TOKEN_COMPARISON_LIKE = 330,

        MS_TOKEN_COMPARISON_INTERSECTS = 331,

        MS_TOKEN_COMPARISON_DISJOINT = 332,

        MS_TOKEN_COMPARISON_TOUCHES = 333,

        MS_TOKEN_COMPARISON_OVERLAPS = 334,

        MS_TOKEN_COMPARISON_CROSSES = 335,

        MS_TOKEN_COMPARISON_WITHIN = 336,

        MS_TOKEN_COMPARISON_CONTAINS = 337,

        MS_TOKEN_COMPARISON_EQUALS = 338,

        MS_TOKEN_COMPARISON_BEYOND = 339,

        MS_TOKEN_COMPARISON_DWITHIN = 340,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_TOKEN_FUNCTION_ENUM
    {

        MS_TOKEN_FUNCTION_LENGTH = 350,

        MS_TOKEN_FUNCTION_TOSTRING = 351,

        MS_TOKEN_FUNCTION_COMMIFY = 352,

        MS_TOKEN_FUNCTION_AREA = 353,

        MS_TOKEN_FUNCTION_ROUND = 354,

        MS_TOKEN_FUNCTION_FROMTEXT = 355,

        MS_TOKEN_FUNCTION_BUFFER = 356,

        MS_TOKEN_FUNCTION_DIFFERENCE = 357,

        MS_TOKEN_FUNCTION_SIMPLIFY = 358,

        MS_TOKEN_FUNCTION_SIMPLIFYPT = 359,

        MS_TOKEN_FUNCTION_GENERALIZE = 360,

        MS_TOKEN_FUNCTION_SMOOTHSIA = 361,

        MS_TOKEN_FUNCTION_CENTERLINE = 362,

        MS_TOKEN_FUNCTION_DENSIFY = 363,

        MS_TOKEN_FUNCTION_OUTER = 364,

        MS_TOKEN_FUNCTION_INNER = 365,

        MS_TOKEN_FUNCTION_JAVASCRIPT = 366,

        MS_TOKEN_FUNCTION_UPPER = 367,

        MS_TOKEN_FUNCTION_LOWER = 368,

        MS_TOKEN_FUNCTION_INITCAP = 369,

        MS_TOKEN_FUNCTION_FIRSTCAP = 370,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_TOKEN_LITERAL_ENUM
    {

        MS_TOKEN_LITERAL_NUMBER = 310,

        MS_TOKEN_LITERAL_STRING = 311,

        MS_TOKEN_LITERAL_TIME = 312,

        MS_TOKEN_LITERAL_SHAPE = 313,

        MS_TOKEN_LITERAL_BOOLEAN = 314,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_TOKEN_LOGICAL_ENUM
    {

        MS_TOKEN_LOGICAL_AND = 300,

        MS_TOKEN_LOGICAL_OR = 301,

        MS_TOKEN_LOGICAL_NOT = 302,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MS_TRANSFORM_MODE
    {

        MS_TRANSFORM_NONE = 0,

        MS_TRANSFORM_ROUND = 1,

        MS_TRANSFORM_SNAPTOGRID = 2,

        MS_TRANSFORM_FULLRESOLUTION = 3,

        MS_TRANSFORM_SIMPLIFY = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OWSRequest
    {
        [Newtonsoft.Json.JsonProperty("NumParams", Required = Newtonsoft.Json.Required.Always)]
        public int NumParams { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public MS_REQUEST_TYPE Type { get; set; }

        [Newtonsoft.Json.JsonProperty("contenttype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contenttype { get; set; }

        [Newtonsoft.Json.JsonProperty("postrequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postrequest { get; set; }

        [Newtonsoft.Json.JsonProperty("httpcookiedata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Httpcookiedata { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectionObj
    {
        [Newtonsoft.Json.JsonProperty("numargs", Required = Newtonsoft.Json.Required.Always)]
        public int Numargs { get; set; }

        [Newtonsoft.Json.JsonProperty("automatic", Required = Newtonsoft.Json.Required.Always)]
        public int Automatic { get; set; }

        [Newtonsoft.Json.JsonProperty("wellknownprojection", Required = Newtonsoft.Json.Required.Always)]
        public int Wellknownprojection { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReprojectionObj
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResultCacheObj
    {
        [Newtonsoft.Json.JsonProperty("numresults", Required = Newtonsoft.Json.Required.Always)]
        public int Numresults { get; set; }

        [Newtonsoft.Json.JsonProperty("bounds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RectObj Bounds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResultObj
    {
        [Newtonsoft.Json.JsonProperty("shapeindex", Required = Newtonsoft.Json.Required.Always)]
        public int Shapeindex { get; set; }

        [Newtonsoft.Json.JsonProperty("tileindex", Required = Newtonsoft.Json.Required.Always)]
        public int Tileindex { get; set; }

        [Newtonsoft.Json.JsonProperty("resultindex", Required = Newtonsoft.Json.Required.Always)]
        public int Resultindex { get; set; }

        [Newtonsoft.Json.JsonProperty("classindex", Required = Newtonsoft.Json.Required.Always)]
        public int Classindex { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScaleTokenEntryObj
    {
        [Newtonsoft.Json.JsonProperty("minscale", Required = Newtonsoft.Json.Required.Always)]
        public double Minscale { get; set; }

        [Newtonsoft.Json.JsonProperty("maxscale", Required = Newtonsoft.Json.Required.Always)]
        public double Maxscale { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScaleTokenObj
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("n_entries", Required = Newtonsoft.Json.Required.Always)]
        public int N_entries { get; set; }

        [Newtonsoft.Json.JsonProperty("tokens", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScaleTokenEntryObj Tokens { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShapefileObj
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public int Type { get; set; }

        [Newtonsoft.Json.JsonProperty("numshapes", Required = Newtonsoft.Json.Required.Always)]
        public int Numshapes { get; set; }

        [Newtonsoft.Json.JsonProperty("bounds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RectObj Bounds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShapeObj
    {
        [Newtonsoft.Json.JsonProperty("numlines", Required = Newtonsoft.Json.Required.Always)]
        public int Numlines { get; set; }

        [Newtonsoft.Json.JsonProperty("numvalues", Required = Newtonsoft.Json.Required.Always)]
        public int Numvalues { get; set; }

        [Newtonsoft.Json.JsonProperty("bounds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RectObj Bounds { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public int Type { get; set; }

        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Always)]
        public int Index { get; set; }

        [Newtonsoft.Json.JsonProperty("tileindex", Required = Newtonsoft.Json.Required.Always)]
        public int Tileindex { get; set; }

        [Newtonsoft.Json.JsonProperty("classindex", Required = Newtonsoft.Json.Required.Always)]
        public int Classindex { get; set; }

        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        [Newtonsoft.Json.JsonProperty("scratch", Required = Newtonsoft.Json.Required.Always)]
        public int Scratch { get; set; }

        [Newtonsoft.Json.JsonProperty("resultindex", Required = Newtonsoft.Json.Required.Always)]
        public int Resultindex { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StyleObj
    {
        [Newtonsoft.Json.JsonProperty("refcount", Required = Newtonsoft.Json.Required.Always)]
        public int Refcount { get; set; }

        [Newtonsoft.Json.JsonProperty("symbolname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbolname { get; set; }

        [Newtonsoft.Json.JsonProperty("patternlength", Required = Newtonsoft.Json.Required.Always)]
        public int Patternlength { get; set; }

        [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<double> Pattern { get; set; }

        [Newtonsoft.Json.JsonProperty("angle", Required = Newtonsoft.Json.Required.Always)]
        public double Angle { get; set; }

        [Newtonsoft.Json.JsonProperty("autoangle", Required = Newtonsoft.Json.Required.Always)]
        public int Autoangle { get; set; }

        [Newtonsoft.Json.JsonProperty("antialiased", Required = Newtonsoft.Json.Required.Always)]
        public int Antialiased { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorObj Color { get; set; }

        [Newtonsoft.Json.JsonProperty("outlinecolor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorObj Outlinecolor { get; set; }

        [Newtonsoft.Json.JsonProperty("opacity", Required = Newtonsoft.Json.Required.Always)]
        public int Opacity { get; set; }

        [Newtonsoft.Json.JsonProperty("mincolor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorObj Mincolor { get; set; }

        [Newtonsoft.Json.JsonProperty("maxcolor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorObj Maxcolor { get; set; }

        [Newtonsoft.Json.JsonProperty("minvalue", Required = Newtonsoft.Json.Required.Always)]
        public double Minvalue { get; set; }

        [Newtonsoft.Json.JsonProperty("maxvalue", Required = Newtonsoft.Json.Required.Always)]
        public double Maxvalue { get; set; }

        [Newtonsoft.Json.JsonProperty("rangeitem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rangeitem { get; set; }

        [Newtonsoft.Json.JsonProperty("rangeitemindex", Required = Newtonsoft.Json.Required.Always)]
        public int Rangeitemindex { get; set; }

        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Always)]
        public int Symbol { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Always)]
        public double Size { get; set; }

        [Newtonsoft.Json.JsonProperty("minsize", Required = Newtonsoft.Json.Required.Always)]
        public double Minsize { get; set; }

        [Newtonsoft.Json.JsonProperty("maxsize", Required = Newtonsoft.Json.Required.Always)]
        public double Maxsize { get; set; }

        [Newtonsoft.Json.JsonProperty("gap", Required = Newtonsoft.Json.Required.Always)]
        public double Gap { get; set; }

        [Newtonsoft.Json.JsonProperty("initialgap", Required = Newtonsoft.Json.Required.Always)]
        public double Initialgap { get; set; }

        [Newtonsoft.Json.JsonProperty("linecap", Required = Newtonsoft.Json.Required.Always)]
        public int Linecap { get; set; }

        [Newtonsoft.Json.JsonProperty("linejoin", Required = Newtonsoft.Json.Required.Always)]
        public int Linejoin { get; set; }

        [Newtonsoft.Json.JsonProperty("linejoinmaxsize", Required = Newtonsoft.Json.Required.Always)]
        public double Linejoinmaxsize { get; set; }

        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public double Width { get; set; }

        [Newtonsoft.Json.JsonProperty("outlinewidth", Required = Newtonsoft.Json.Required.Always)]
        public double Outlinewidth { get; set; }

        [Newtonsoft.Json.JsonProperty("minwidth", Required = Newtonsoft.Json.Required.Always)]
        public double Minwidth { get; set; }

        [Newtonsoft.Json.JsonProperty("maxwidth", Required = Newtonsoft.Json.Required.Always)]
        public double Maxwidth { get; set; }

        [Newtonsoft.Json.JsonProperty("offsetx", Required = Newtonsoft.Json.Required.Always)]
        public double Offsetx { get; set; }

        [Newtonsoft.Json.JsonProperty("offsety", Required = Newtonsoft.Json.Required.Always)]
        public double Offsety { get; set; }

        [Newtonsoft.Json.JsonProperty("polaroffsetpixel", Required = Newtonsoft.Json.Required.Always)]
        public double Polaroffsetpixel { get; set; }

        [Newtonsoft.Json.JsonProperty("polaroffsetangle", Required = Newtonsoft.Json.Required.Always)]
        public double Polaroffsetangle { get; set; }

        [Newtonsoft.Json.JsonProperty("minscaledenom", Required = Newtonsoft.Json.Required.Always)]
        public double Minscaledenom { get; set; }

        [Newtonsoft.Json.JsonProperty("maxscaledenom", Required = Newtonsoft.Json.Required.Always)]
        public double Maxscaledenom { get; set; }

        [Newtonsoft.Json.JsonProperty("sizeunits", Required = Newtonsoft.Json.Required.Always)]
        public int Sizeunits { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SWIGTYPE_p_double
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SymbolObj
    {
        [Newtonsoft.Json.JsonProperty("refcount", Required = Newtonsoft.Json.Required.Always)]
        public int Refcount { get; set; }

        [Newtonsoft.Json.JsonProperty("numpoints", Required = Newtonsoft.Json.Required.Always)]
        public int Numpoints { get; set; }

        [Newtonsoft.Json.JsonProperty("imagepath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Imagepath { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public int Type { get; set; }

        [Newtonsoft.Json.JsonProperty("inmapfile", Required = Newtonsoft.Json.Required.Always)]
        public int Inmapfile { get; set; }

        [Newtonsoft.Json.JsonProperty("sizex", Required = Newtonsoft.Json.Required.Always)]
        public double Sizex { get; set; }

        [Newtonsoft.Json.JsonProperty("sizey", Required = Newtonsoft.Json.Required.Always)]
        public double Sizey { get; set; }

        [Newtonsoft.Json.JsonProperty("minx", Required = Newtonsoft.Json.Required.Always)]
        public double Minx { get; set; }

        [Newtonsoft.Json.JsonProperty("miny", Required = Newtonsoft.Json.Required.Always)]
        public double Miny { get; set; }

        [Newtonsoft.Json.JsonProperty("maxx", Required = Newtonsoft.Json.Required.Always)]
        public double Maxx { get; set; }

        [Newtonsoft.Json.JsonProperty("maxy", Required = Newtonsoft.Json.Required.Always)]
        public double Maxy { get; set; }

        [Newtonsoft.Json.JsonProperty("filled", Required = Newtonsoft.Json.Required.Always)]
        public int Filled { get; set; }

        [Newtonsoft.Json.JsonProperty("anchorpoint_x", Required = Newtonsoft.Json.Required.Always)]
        public double Anchorpoint_x { get; set; }

        [Newtonsoft.Json.JsonProperty("anchorpoint_y", Required = Newtonsoft.Json.Required.Always)]
        public double Anchorpoint_y { get; set; }

        [Newtonsoft.Json.JsonProperty("transparent", Required = Newtonsoft.Json.Required.Always)]
        public int Transparent { get; set; }

        [Newtonsoft.Json.JsonProperty("transparentcolor", Required = Newtonsoft.Json.Required.Always)]
        public int Transparentcolor { get; set; }

        [Newtonsoft.Json.JsonProperty("character", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Character { get; set; }

        [Newtonsoft.Json.JsonProperty("font", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Font { get; set; }

    }
}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603