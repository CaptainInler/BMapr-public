//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ClassObj implements IClassObj {
    metadata?: HashTableObj | undefined;
    validation?: HashTableObj | undefined;
    numstyles!: number;
    numlabels!: number;
    refcount!: number;
    layer?: LayerObj | undefined;
    leader?: LabelLeaderObj | undefined;
    status!: number;
    isfallback!: number;
    name?: string | undefined;
    title?: string | undefined;
    minscaledenom!: number;
    maxscaledenom!: number;
    minfeaturesize!: number;
    debug!: number;
    keyimage?: string | undefined;
    group?: string | undefined;
    sizeunits!: number;
    template?: string | undefined;

    constructor(data?: IClassObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.metadata = _data["metadata"] ? HashTableObj.fromJS(_data["metadata"]) : <any>undefined;
            this.validation = _data["validation"] ? HashTableObj.fromJS(_data["validation"]) : <any>undefined;
            this.numstyles = _data["numstyles"];
            this.numlabels = _data["numlabels"];
            this.refcount = _data["refcount"];
            this.layer = _data["layer"] ? LayerObj.fromJS(_data["layer"]) : <any>undefined;
            this.leader = _data["leader"] ? LabelLeaderObj.fromJS(_data["leader"]) : <any>undefined;
            this.status = _data["status"];
            this.isfallback = _data["isfallback"];
            this.name = _data["name"];
            this.title = _data["title"];
            this.minscaledenom = _data["minscaledenom"];
            this.maxscaledenom = _data["maxscaledenom"];
            this.minfeaturesize = _data["minfeaturesize"];
            this.debug = _data["debug"];
            this.keyimage = _data["keyimage"];
            this.group = _data["group"];
            this.sizeunits = _data["sizeunits"];
            this.template = _data["template"];
        }
    }

    static fromJS(data: any): ClassObj {
        data = typeof data === 'object' ? data : {};
        let result = new ClassObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["metadata"] = this.metadata ? this.metadata.toJSON() : <any>undefined;
        data["validation"] = this.validation ? this.validation.toJSON() : <any>undefined;
        data["numstyles"] = this.numstyles;
        data["numlabels"] = this.numlabels;
        data["refcount"] = this.refcount;
        data["layer"] = this.layer ? this.layer.toJSON() : <any>undefined;
        data["leader"] = this.leader ? this.leader.toJSON() : <any>undefined;
        data["status"] = this.status;
        data["isfallback"] = this.isfallback;
        data["name"] = this.name;
        data["title"] = this.title;
        data["minscaledenom"] = this.minscaledenom;
        data["maxscaledenom"] = this.maxscaledenom;
        data["minfeaturesize"] = this.minfeaturesize;
        data["debug"] = this.debug;
        data["keyimage"] = this.keyimage;
        data["group"] = this.group;
        data["sizeunits"] = this.sizeunits;
        data["template"] = this.template;
        return data;
    }
}

export interface IClassObj {
    metadata?: HashTableObj | undefined;
    validation?: HashTableObj | undefined;
    numstyles: number;
    numlabels: number;
    refcount: number;
    layer?: LayerObj | undefined;
    leader?: LabelLeaderObj | undefined;
    status: number;
    isfallback: number;
    name?: string | undefined;
    title?: string | undefined;
    minscaledenom: number;
    maxscaledenom: number;
    minfeaturesize: number;
    debug: number;
    keyimage?: string | undefined;
    group?: string | undefined;
    sizeunits: number;
    template?: string | undefined;
}

export class HashTableObj implements IHashTableObj {
    numitems!: number;

    constructor(data?: IHashTableObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.numitems = _data["numitems"];
        }
    }

    static fromJS(data: any): HashTableObj {
        data = typeof data === 'object' ? data : {};
        let result = new HashTableObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["numitems"] = this.numitems;
        return data;
    }
}

export interface IHashTableObj {
    numitems: number;
}

export class LayerObj implements ILayerObj {
    refcount!: number;
    numclasses!: number;
    maxclasses!: number;
    index!: number;
    map?: MapObj | undefined;
    numitems!: number;
    metadata?: HashTableObj | undefined;
    validation?: HashTableObj | undefined;
    bindvals?: HashTableObj | undefined;
    connectionoptions?: HashTableObj | undefined;
    cluster?: ClusterObj | undefined;
    extent?: RectObj | undefined;
    numprocessing!: number;
    numjoins!: number;
    utfdata?: SWIGTYPE_p_expressionObj | undefined;
    compositer?: LayerCompositer | undefined;
    classitem?: string | undefined;
    header?: string | undefined;
    footer?: string | undefined;
    template?: string | undefined;
    name?: string | undefined;
    group?: string | undefined;
    status!: number;
    rendermode!: MS_RENDER_MODE;
    data?: string | undefined;
    type!: MS_LAYER_TYPE;
    connectiontype!: MS_CONNECTION_TYPE;
    tolerance!: number;
    toleranceunits!: number;
    symbolscaledenom!: number;
    minscaledenom!: number;
    maxscaledenom!: number;
    minfeaturesize!: number;
    labelminscaledenom!: number;
    labelmaxscaledenom!: number;
    mingeowidth!: number;
    maxgeowidth!: number;
    sizeunits!: number;
    maxfeatures!: number;
    startindex!: number;
    offsite?: ColorObj | undefined;
    transform!: number;
    labelcache!: number;
    postlabelcache!: number;
    labelitem?: string | undefined;
    tileitem?: string | undefined;
    tileindex?: string | undefined;
    tilesrs?: string | undefined;
    units!: number;
    connection?: string | undefined;
    plugin_library?: string | undefined;
    plugin_library_original?: string | undefined;
    bandsitem?: string | undefined;
    filteritem?: string | undefined;
    styleitem?: string | undefined;
    requires?: string | undefined;
    labelrequires?: string | undefined;
    debug!: number;
    classgroup?: string | undefined;
    mask?: string | undefined;
    encoding?: string | undefined;
    utfitem?: string | undefined;
    utfitemindex!: number;

    constructor(data?: ILayerObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.refcount = _data["refcount"];
            this.numclasses = _data["numclasses"];
            this.maxclasses = _data["maxclasses"];
            this.index = _data["index"];
            this.map = _data["map"] ? MapObj.fromJS(_data["map"]) : <any>undefined;
            this.numitems = _data["numitems"];
            this.metadata = _data["metadata"] ? HashTableObj.fromJS(_data["metadata"]) : <any>undefined;
            this.validation = _data["validation"] ? HashTableObj.fromJS(_data["validation"]) : <any>undefined;
            this.bindvals = _data["bindvals"] ? HashTableObj.fromJS(_data["bindvals"]) : <any>undefined;
            this.connectionoptions = _data["connectionoptions"] ? HashTableObj.fromJS(_data["connectionoptions"]) : <any>undefined;
            this.cluster = _data["cluster"] ? ClusterObj.fromJS(_data["cluster"]) : <any>undefined;
            this.extent = _data["extent"] ? RectObj.fromJS(_data["extent"]) : <any>undefined;
            this.numprocessing = _data["numprocessing"];
            this.numjoins = _data["numjoins"];
            this.utfdata = _data["utfdata"] ? SWIGTYPE_p_expressionObj.fromJS(_data["utfdata"]) : <any>undefined;
            this.compositer = _data["compositer"] ? LayerCompositer.fromJS(_data["compositer"]) : <any>undefined;
            this.classitem = _data["classitem"];
            this.header = _data["header"];
            this.footer = _data["footer"];
            this.template = _data["template"];
            this.name = _data["name"];
            this.group = _data["group"];
            this.status = _data["status"];
            this.rendermode = _data["rendermode"];
            this.data = _data["data"];
            this.type = _data["type"];
            this.connectiontype = _data["connectiontype"];
            this.tolerance = _data["tolerance"];
            this.toleranceunits = _data["toleranceunits"];
            this.symbolscaledenom = _data["symbolscaledenom"];
            this.minscaledenom = _data["minscaledenom"];
            this.maxscaledenom = _data["maxscaledenom"];
            this.minfeaturesize = _data["minfeaturesize"];
            this.labelminscaledenom = _data["labelminscaledenom"];
            this.labelmaxscaledenom = _data["labelmaxscaledenom"];
            this.mingeowidth = _data["mingeowidth"];
            this.maxgeowidth = _data["maxgeowidth"];
            this.sizeunits = _data["sizeunits"];
            this.maxfeatures = _data["maxfeatures"];
            this.startindex = _data["startindex"];
            this.offsite = _data["offsite"] ? ColorObj.fromJS(_data["offsite"]) : <any>undefined;
            this.transform = _data["transform"];
            this.labelcache = _data["labelcache"];
            this.postlabelcache = _data["postlabelcache"];
            this.labelitem = _data["labelitem"];
            this.tileitem = _data["tileitem"];
            this.tileindex = _data["tileindex"];
            this.tilesrs = _data["tilesrs"];
            this.units = _data["units"];
            this.connection = _data["connection"];
            this.plugin_library = _data["plugin_library"];
            this.plugin_library_original = _data["plugin_library_original"];
            this.bandsitem = _data["bandsitem"];
            this.filteritem = _data["filteritem"];
            this.styleitem = _data["styleitem"];
            this.requires = _data["requires"];
            this.labelrequires = _data["labelrequires"];
            this.debug = _data["debug"];
            this.classgroup = _data["classgroup"];
            this.mask = _data["mask"];
            this.encoding = _data["encoding"];
            this.utfitem = _data["utfitem"];
            this.utfitemindex = _data["utfitemindex"];
        }
    }

    static fromJS(data: any): LayerObj {
        data = typeof data === 'object' ? data : {};
        let result = new LayerObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["refcount"] = this.refcount;
        data["numclasses"] = this.numclasses;
        data["maxclasses"] = this.maxclasses;
        data["index"] = this.index;
        data["map"] = this.map ? this.map.toJSON() : <any>undefined;
        data["numitems"] = this.numitems;
        data["metadata"] = this.metadata ? this.metadata.toJSON() : <any>undefined;
        data["validation"] = this.validation ? this.validation.toJSON() : <any>undefined;
        data["bindvals"] = this.bindvals ? this.bindvals.toJSON() : <any>undefined;
        data["connectionoptions"] = this.connectionoptions ? this.connectionoptions.toJSON() : <any>undefined;
        data["cluster"] = this.cluster ? this.cluster.toJSON() : <any>undefined;
        data["extent"] = this.extent ? this.extent.toJSON() : <any>undefined;
        data["numprocessing"] = this.numprocessing;
        data["numjoins"] = this.numjoins;
        data["utfdata"] = this.utfdata ? this.utfdata.toJSON() : <any>undefined;
        data["compositer"] = this.compositer ? this.compositer.toJSON() : <any>undefined;
        data["classitem"] = this.classitem;
        data["header"] = this.header;
        data["footer"] = this.footer;
        data["template"] = this.template;
        data["name"] = this.name;
        data["group"] = this.group;
        data["status"] = this.status;
        data["rendermode"] = this.rendermode;
        data["data"] = this.data;
        data["type"] = this.type;
        data["connectiontype"] = this.connectiontype;
        data["tolerance"] = this.tolerance;
        data["toleranceunits"] = this.toleranceunits;
        data["symbolscaledenom"] = this.symbolscaledenom;
        data["minscaledenom"] = this.minscaledenom;
        data["maxscaledenom"] = this.maxscaledenom;
        data["minfeaturesize"] = this.minfeaturesize;
        data["labelminscaledenom"] = this.labelminscaledenom;
        data["labelmaxscaledenom"] = this.labelmaxscaledenom;
        data["mingeowidth"] = this.mingeowidth;
        data["maxgeowidth"] = this.maxgeowidth;
        data["sizeunits"] = this.sizeunits;
        data["maxfeatures"] = this.maxfeatures;
        data["startindex"] = this.startindex;
        data["offsite"] = this.offsite ? this.offsite.toJSON() : <any>undefined;
        data["transform"] = this.transform;
        data["labelcache"] = this.labelcache;
        data["postlabelcache"] = this.postlabelcache;
        data["labelitem"] = this.labelitem;
        data["tileitem"] = this.tileitem;
        data["tileindex"] = this.tileindex;
        data["tilesrs"] = this.tilesrs;
        data["units"] = this.units;
        data["connection"] = this.connection;
        data["plugin_library"] = this.plugin_library;
        data["plugin_library_original"] = this.plugin_library_original;
        data["bandsitem"] = this.bandsitem;
        data["filteritem"] = this.filteritem;
        data["styleitem"] = this.styleitem;
        data["requires"] = this.requires;
        data["labelrequires"] = this.labelrequires;
        data["debug"] = this.debug;
        data["classgroup"] = this.classgroup;
        data["mask"] = this.mask;
        data["encoding"] = this.encoding;
        data["utfitem"] = this.utfitem;
        data["utfitemindex"] = this.utfitemindex;
        return data;
    }
}

export interface ILayerObj {
    refcount: number;
    numclasses: number;
    maxclasses: number;
    index: number;
    map?: MapObj | undefined;
    numitems: number;
    metadata?: HashTableObj | undefined;
    validation?: HashTableObj | undefined;
    bindvals?: HashTableObj | undefined;
    connectionoptions?: HashTableObj | undefined;
    cluster?: ClusterObj | undefined;
    extent?: RectObj | undefined;
    numprocessing: number;
    numjoins: number;
    utfdata?: SWIGTYPE_p_expressionObj | undefined;
    compositer?: LayerCompositer | undefined;
    classitem?: string | undefined;
    header?: string | undefined;
    footer?: string | undefined;
    template?: string | undefined;
    name?: string | undefined;
    group?: string | undefined;
    status: number;
    rendermode: MS_RENDER_MODE;
    data?: string | undefined;
    type: MS_LAYER_TYPE;
    connectiontype: MS_CONNECTION_TYPE;
    tolerance: number;
    toleranceunits: number;
    symbolscaledenom: number;
    minscaledenom: number;
    maxscaledenom: number;
    minfeaturesize: number;
    labelminscaledenom: number;
    labelmaxscaledenom: number;
    mingeowidth: number;
    maxgeowidth: number;
    sizeunits: number;
    maxfeatures: number;
    startindex: number;
    offsite?: ColorObj | undefined;
    transform: number;
    labelcache: number;
    postlabelcache: number;
    labelitem?: string | undefined;
    tileitem?: string | undefined;
    tileindex?: string | undefined;
    tilesrs?: string | undefined;
    units: number;
    connection?: string | undefined;
    plugin_library?: string | undefined;
    plugin_library_original?: string | undefined;
    bandsitem?: string | undefined;
    filteritem?: string | undefined;
    styleitem?: string | undefined;
    requires?: string | undefined;
    labelrequires?: string | undefined;
    debug: number;
    classgroup?: string | undefined;
    mask?: string | undefined;
    encoding?: string | undefined;
    utfitem?: string | undefined;
    utfitemindex: number;
}

export class MapObj implements IMapObj {
    refcount!: number;
    numlayers!: number;
    maxlayers!: number;
    configoptions?: HashTableObj | undefined;
    symbolset?: SymbolSetObj | undefined;
    fontset?: FontSetObj | undefined;
    labelcache?: LabelCacheObj | undefined;
    numoutputformats!: number;
    outputformat?: OutputFormatObj | undefined;
    imagetype?: string | undefined;
    reference?: ReferenceMapObj | undefined;
    scalebar?: ScalebarObj | undefined;
    legend?: LegendObj | undefined;
    querymap?: QueryMapObj | undefined;
    web?: WebObj | undefined;
    config?: ConfigObj | undefined;
    datapattern?: string | undefined;
    templatepattern?: string | undefined;
    name?: string | undefined;
    status!: number;
    height!: number;
    width!: number;
    maxsize!: number;
    extent?: RectObj | undefined;
    cellsize!: number;
    units!: MS_UNITS;
    scaledenom!: number;
    resolution!: number;
    defresolution!: number;
    shapepath?: string | undefined;
    mappath?: string | undefined;
    sldurl?: string | undefined;
    imagecolor?: ColorObj | undefined;
    layerorder?: SWIGTYPE_p_int | undefined;
    debug!: number;

    constructor(data?: IMapObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.refcount = _data["refcount"];
            this.numlayers = _data["numlayers"];
            this.maxlayers = _data["maxlayers"];
            this.configoptions = _data["configoptions"] ? HashTableObj.fromJS(_data["configoptions"]) : <any>undefined;
            this.symbolset = _data["symbolset"] ? SymbolSetObj.fromJS(_data["symbolset"]) : <any>undefined;
            this.fontset = _data["fontset"] ? FontSetObj.fromJS(_data["fontset"]) : <any>undefined;
            this.labelcache = _data["labelcache"] ? LabelCacheObj.fromJS(_data["labelcache"]) : <any>undefined;
            this.numoutputformats = _data["numoutputformats"];
            this.outputformat = _data["outputformat"] ? OutputFormatObj.fromJS(_data["outputformat"]) : <any>undefined;
            this.imagetype = _data["imagetype"];
            this.reference = _data["reference"] ? ReferenceMapObj.fromJS(_data["reference"]) : <any>undefined;
            this.scalebar = _data["scalebar"] ? ScalebarObj.fromJS(_data["scalebar"]) : <any>undefined;
            this.legend = _data["legend"] ? LegendObj.fromJS(_data["legend"]) : <any>undefined;
            this.querymap = _data["querymap"] ? QueryMapObj.fromJS(_data["querymap"]) : <any>undefined;
            this.web = _data["web"] ? WebObj.fromJS(_data["web"]) : <any>undefined;
            this.config = _data["config"] ? ConfigObj.fromJS(_data["config"]) : <any>undefined;
            this.datapattern = _data["datapattern"];
            this.templatepattern = _data["templatepattern"];
            this.name = _data["name"];
            this.status = _data["status"];
            this.height = _data["height"];
            this.width = _data["width"];
            this.maxsize = _data["maxsize"];
            this.extent = _data["extent"] ? RectObj.fromJS(_data["extent"]) : <any>undefined;
            this.cellsize = _data["cellsize"];
            this.units = _data["units"];
            this.scaledenom = _data["scaledenom"];
            this.resolution = _data["resolution"];
            this.defresolution = _data["defresolution"];
            this.shapepath = _data["shapepath"];
            this.mappath = _data["mappath"];
            this.sldurl = _data["sldurl"];
            this.imagecolor = _data["imagecolor"] ? ColorObj.fromJS(_data["imagecolor"]) : <any>undefined;
            this.layerorder = _data["layerorder"] ? SWIGTYPE_p_int.fromJS(_data["layerorder"]) : <any>undefined;
            this.debug = _data["debug"];
        }
    }

    static fromJS(data: any): MapObj {
        data = typeof data === 'object' ? data : {};
        let result = new MapObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["refcount"] = this.refcount;
        data["numlayers"] = this.numlayers;
        data["maxlayers"] = this.maxlayers;
        data["configoptions"] = this.configoptions ? this.configoptions.toJSON() : <any>undefined;
        data["symbolset"] = this.symbolset ? this.symbolset.toJSON() : <any>undefined;
        data["fontset"] = this.fontset ? this.fontset.toJSON() : <any>undefined;
        data["labelcache"] = this.labelcache ? this.labelcache.toJSON() : <any>undefined;
        data["numoutputformats"] = this.numoutputformats;
        data["outputformat"] = this.outputformat ? this.outputformat.toJSON() : <any>undefined;
        data["imagetype"] = this.imagetype;
        data["reference"] = this.reference ? this.reference.toJSON() : <any>undefined;
        data["scalebar"] = this.scalebar ? this.scalebar.toJSON() : <any>undefined;
        data["legend"] = this.legend ? this.legend.toJSON() : <any>undefined;
        data["querymap"] = this.querymap ? this.querymap.toJSON() : <any>undefined;
        data["web"] = this.web ? this.web.toJSON() : <any>undefined;
        data["config"] = this.config ? this.config.toJSON() : <any>undefined;
        data["datapattern"] = this.datapattern;
        data["templatepattern"] = this.templatepattern;
        data["name"] = this.name;
        data["status"] = this.status;
        data["height"] = this.height;
        data["width"] = this.width;
        data["maxsize"] = this.maxsize;
        data["extent"] = this.extent ? this.extent.toJSON() : <any>undefined;
        data["cellsize"] = this.cellsize;
        data["units"] = this.units;
        data["scaledenom"] = this.scaledenom;
        data["resolution"] = this.resolution;
        data["defresolution"] = this.defresolution;
        data["shapepath"] = this.shapepath;
        data["mappath"] = this.mappath;
        data["sldurl"] = this.sldurl;
        data["imagecolor"] = this.imagecolor ? this.imagecolor.toJSON() : <any>undefined;
        data["layerorder"] = this.layerorder ? this.layerorder.toJSON() : <any>undefined;
        data["debug"] = this.debug;
        return data;
    }
}

export interface IMapObj {
    refcount: number;
    numlayers: number;
    maxlayers: number;
    configoptions?: HashTableObj | undefined;
    symbolset?: SymbolSetObj | undefined;
    fontset?: FontSetObj | undefined;
    labelcache?: LabelCacheObj | undefined;
    numoutputformats: number;
    outputformat?: OutputFormatObj | undefined;
    imagetype?: string | undefined;
    reference?: ReferenceMapObj | undefined;
    scalebar?: ScalebarObj | undefined;
    legend?: LegendObj | undefined;
    querymap?: QueryMapObj | undefined;
    web?: WebObj | undefined;
    config?: ConfigObj | undefined;
    datapattern?: string | undefined;
    templatepattern?: string | undefined;
    name?: string | undefined;
    status: number;
    height: number;
    width: number;
    maxsize: number;
    extent?: RectObj | undefined;
    cellsize: number;
    units: MS_UNITS;
    scaledenom: number;
    resolution: number;
    defresolution: number;
    shapepath?: string | undefined;
    mappath?: string | undefined;
    sldurl?: string | undefined;
    imagecolor?: ColorObj | undefined;
    layerorder?: SWIGTYPE_p_int | undefined;
    debug: number;
}

export class SymbolSetObj implements ISymbolSetObj {
    numsymbols!: number;
    maxsymbols!: number;
    filename?: string | undefined;
    imagecachesize!: number;

    constructor(data?: ISymbolSetObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.numsymbols = _data["numsymbols"];
            this.maxsymbols = _data["maxsymbols"];
            this.filename = _data["filename"];
            this.imagecachesize = _data["imagecachesize"];
        }
    }

    static fromJS(data: any): SymbolSetObj {
        data = typeof data === 'object' ? data : {};
        let result = new SymbolSetObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["numsymbols"] = this.numsymbols;
        data["maxsymbols"] = this.maxsymbols;
        data["filename"] = this.filename;
        data["imagecachesize"] = this.imagecachesize;
        return data;
    }
}

export interface ISymbolSetObj {
    numsymbols: number;
    maxsymbols: number;
    filename?: string | undefined;
    imagecachesize: number;
}

export class FontSetObj implements IFontSetObj {
    filename?: string | undefined;
    numfonts!: number;
    fonts?: HashTableObj | undefined;

    constructor(data?: IFontSetObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.filename = _data["filename"];
            this.numfonts = _data["numfonts"];
            this.fonts = _data["fonts"] ? HashTableObj.fromJS(_data["fonts"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FontSetObj {
        data = typeof data === 'object' ? data : {};
        let result = new FontSetObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filename"] = this.filename;
        data["numfonts"] = this.numfonts;
        data["fonts"] = this.fonts ? this.fonts.toJSON() : <any>undefined;
        return data;
    }
}

export interface IFontSetObj {
    filename?: string | undefined;
    numfonts: number;
    fonts?: HashTableObj | undefined;
}

export class LabelCacheObj implements ILabelCacheObj {
    num_rendered_members!: number;

    constructor(data?: ILabelCacheObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.num_rendered_members = _data["num_rendered_members"];
        }
    }

    static fromJS(data: any): LabelCacheObj {
        data = typeof data === 'object' ? data : {};
        let result = new LabelCacheObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["num_rendered_members"] = this.num_rendered_members;
        return data;
    }
}

export interface ILabelCacheObj {
    num_rendered_members: number;
}

export class OutputFormatObj implements IOutputFormatObj {
    numformatoptions!: number;
    name?: string | undefined;
    mimetype?: string | undefined;
    driver?: string | undefined;
    extension?: string | undefined;
    renderer!: number;
    imagemode!: number;
    transparent!: number;
    bands!: number;
    inmapfile!: number;

    constructor(data?: IOutputFormatObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.numformatoptions = _data["numformatoptions"];
            this.name = _data["name"];
            this.mimetype = _data["mimetype"];
            this.driver = _data["driver"];
            this.extension = _data["extension"];
            this.renderer = _data["renderer"];
            this.imagemode = _data["imagemode"];
            this.transparent = _data["transparent"];
            this.bands = _data["bands"];
            this.inmapfile = _data["inmapfile"];
        }
    }

    static fromJS(data: any): OutputFormatObj {
        data = typeof data === 'object' ? data : {};
        let result = new OutputFormatObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["numformatoptions"] = this.numformatoptions;
        data["name"] = this.name;
        data["mimetype"] = this.mimetype;
        data["driver"] = this.driver;
        data["extension"] = this.extension;
        data["renderer"] = this.renderer;
        data["imagemode"] = this.imagemode;
        data["transparent"] = this.transparent;
        data["bands"] = this.bands;
        data["inmapfile"] = this.inmapfile;
        return data;
    }
}

export interface IOutputFormatObj {
    numformatoptions: number;
    name?: string | undefined;
    mimetype?: string | undefined;
    driver?: string | undefined;
    extension?: string | undefined;
    renderer: number;
    imagemode: number;
    transparent: number;
    bands: number;
    inmapfile: number;
}

export class ReferenceMapObj implements IReferenceMapObj {
    map?: MapObj | undefined;
    extent?: RectObj | undefined;
    height!: number;
    width!: number;
    color?: ColorObj | undefined;
    outlinecolor?: ColorObj | undefined;
    image?: string | undefined;
    status!: number;
    marker!: number;
    markername?: string | undefined;
    markersize!: number;
    minboxsize!: number;
    maxboxsize!: number;

    constructor(data?: IReferenceMapObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.map = _data["map"] ? MapObj.fromJS(_data["map"]) : <any>undefined;
            this.extent = _data["extent"] ? RectObj.fromJS(_data["extent"]) : <any>undefined;
            this.height = _data["height"];
            this.width = _data["width"];
            this.color = _data["color"] ? ColorObj.fromJS(_data["color"]) : <any>undefined;
            this.outlinecolor = _data["outlinecolor"] ? ColorObj.fromJS(_data["outlinecolor"]) : <any>undefined;
            this.image = _data["image"];
            this.status = _data["status"];
            this.marker = _data["marker"];
            this.markername = _data["markername"];
            this.markersize = _data["markersize"];
            this.minboxsize = _data["minboxsize"];
            this.maxboxsize = _data["maxboxsize"];
        }
    }

    static fromJS(data: any): ReferenceMapObj {
        data = typeof data === 'object' ? data : {};
        let result = new ReferenceMapObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["map"] = this.map ? this.map.toJSON() : <any>undefined;
        data["extent"] = this.extent ? this.extent.toJSON() : <any>undefined;
        data["height"] = this.height;
        data["width"] = this.width;
        data["color"] = this.color ? this.color.toJSON() : <any>undefined;
        data["outlinecolor"] = this.outlinecolor ? this.outlinecolor.toJSON() : <any>undefined;
        data["image"] = this.image;
        data["status"] = this.status;
        data["marker"] = this.marker;
        data["markername"] = this.markername;
        data["markersize"] = this.markersize;
        data["minboxsize"] = this.minboxsize;
        data["maxboxsize"] = this.maxboxsize;
        return data;
    }
}

export interface IReferenceMapObj {
    map?: MapObj | undefined;
    extent?: RectObj | undefined;
    height: number;
    width: number;
    color?: ColorObj | undefined;
    outlinecolor?: ColorObj | undefined;
    image?: string | undefined;
    status: number;
    marker: number;
    markername?: string | undefined;
    markersize: number;
    minboxsize: number;
    maxboxsize: number;
}

export class RectObj implements IRectObj {
    minx!: number;
    miny!: number;
    maxx!: number;
    maxy!: number;

    constructor(data?: IRectObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.minx = _data["minx"];
            this.miny = _data["miny"];
            this.maxx = _data["maxx"];
            this.maxy = _data["maxy"];
        }
    }

    static fromJS(data: any): RectObj {
        data = typeof data === 'object' ? data : {};
        let result = new RectObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["minx"] = this.minx;
        data["miny"] = this.miny;
        data["maxx"] = this.maxx;
        data["maxy"] = this.maxy;
        return data;
    }
}

export interface IRectObj {
    minx: number;
    miny: number;
    maxx: number;
    maxy: number;
}

export class ColorObj implements IColorObj {
    red!: number;
    green!: number;
    blue!: number;
    alpha!: number;

    constructor(data?: IColorObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.red = _data["red"];
            this.green = _data["green"];
            this.blue = _data["blue"];
            this.alpha = _data["alpha"];
        }
    }

    static fromJS(data: any): ColorObj {
        data = typeof data === 'object' ? data : {};
        let result = new ColorObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["red"] = this.red;
        data["green"] = this.green;
        data["blue"] = this.blue;
        data["alpha"] = this.alpha;
        return data;
    }
}

export interface IColorObj {
    red: number;
    green: number;
    blue: number;
    alpha: number;
}

export class ScalebarObj implements IScalebarObj {
    transparent!: number;
    imagecolor?: ColorObj | undefined;
    height!: number;
    width!: number;
    style!: number;
    intervals!: number;
    label?: LabelObj | undefined;
    color?: ColorObj | undefined;
    backgroundcolor?: ColorObj | undefined;
    outlinecolor?: ColorObj | undefined;
    units!: number;
    status!: number;
    position!: number;
    postlabelcache!: number;
    align!: number;
    offsetx!: number;
    offsety!: number;

    constructor(data?: IScalebarObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.transparent = _data["transparent"];
            this.imagecolor = _data["imagecolor"] ? ColorObj.fromJS(_data["imagecolor"]) : <any>undefined;
            this.height = _data["height"];
            this.width = _data["width"];
            this.style = _data["style"];
            this.intervals = _data["intervals"];
            this.label = _data["label"] ? LabelObj.fromJS(_data["label"]) : <any>undefined;
            this.color = _data["color"] ? ColorObj.fromJS(_data["color"]) : <any>undefined;
            this.backgroundcolor = _data["backgroundcolor"] ? ColorObj.fromJS(_data["backgroundcolor"]) : <any>undefined;
            this.outlinecolor = _data["outlinecolor"] ? ColorObj.fromJS(_data["outlinecolor"]) : <any>undefined;
            this.units = _data["units"];
            this.status = _data["status"];
            this.position = _data["position"];
            this.postlabelcache = _data["postlabelcache"];
            this.align = _data["align"];
            this.offsetx = _data["offsetx"];
            this.offsety = _data["offsety"];
        }
    }

    static fromJS(data: any): ScalebarObj {
        data = typeof data === 'object' ? data : {};
        let result = new ScalebarObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transparent"] = this.transparent;
        data["imagecolor"] = this.imagecolor ? this.imagecolor.toJSON() : <any>undefined;
        data["height"] = this.height;
        data["width"] = this.width;
        data["style"] = this.style;
        data["intervals"] = this.intervals;
        data["label"] = this.label ? this.label.toJSON() : <any>undefined;
        data["color"] = this.color ? this.color.toJSON() : <any>undefined;
        data["backgroundcolor"] = this.backgroundcolor ? this.backgroundcolor.toJSON() : <any>undefined;
        data["outlinecolor"] = this.outlinecolor ? this.outlinecolor.toJSON() : <any>undefined;
        data["units"] = this.units;
        data["status"] = this.status;
        data["position"] = this.position;
        data["postlabelcache"] = this.postlabelcache;
        data["align"] = this.align;
        data["offsetx"] = this.offsetx;
        data["offsety"] = this.offsety;
        return data;
    }
}

export interface IScalebarObj {
    transparent: number;
    imagecolor?: ColorObj | undefined;
    height: number;
    width: number;
    style: number;
    intervals: number;
    label?: LabelObj | undefined;
    color?: ColorObj | undefined;
    backgroundcolor?: ColorObj | undefined;
    outlinecolor?: ColorObj | undefined;
    units: number;
    status: number;
    position: number;
    postlabelcache: number;
    align: number;
    offsetx: number;
    offsety: number;
}

export class LabelObj implements ILabelObj {
    refcount!: number;
    font?: string | undefined;
    color?: ColorObj | undefined;
    outlinecolor?: ColorObj | undefined;
    outlinewidth!: number;
    shadowcolor?: ColorObj | undefined;
    shadowsizex!: number;
    shadowsizey!: number;
    size!: number;
    minsize!: number;
    maxsize!: number;
    position!: number;
    offsetx!: number;
    offsety!: number;
    angle!: number;
    anglemode!: MS_POSITIONS_ENUM;
    buffer!: number;
    align!: number;
    wrap!: string;
    maxlength!: number;
    space_size_10!: number;
    minfeaturesize!: number;
    autominfeaturesize!: number;
    minscaledenom!: number;
    maxscaledenom!: number;
    mindistance!: number;
    repeatdistance!: number;
    maxoverlapangle!: number;
    partials!: number;
    force!: number;
    encoding?: string | undefined;
    priority!: number;
    numstyles!: number;
    sizeunits!: number;

    constructor(data?: ILabelObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.refcount = _data["refcount"];
            this.font = _data["font"];
            this.color = _data["color"] ? ColorObj.fromJS(_data["color"]) : <any>undefined;
            this.outlinecolor = _data["outlinecolor"] ? ColorObj.fromJS(_data["outlinecolor"]) : <any>undefined;
            this.outlinewidth = _data["outlinewidth"];
            this.shadowcolor = _data["shadowcolor"] ? ColorObj.fromJS(_data["shadowcolor"]) : <any>undefined;
            this.shadowsizex = _data["shadowsizex"];
            this.shadowsizey = _data["shadowsizey"];
            this.size = _data["size"];
            this.minsize = _data["minsize"];
            this.maxsize = _data["maxsize"];
            this.position = _data["position"];
            this.offsetx = _data["offsetx"];
            this.offsety = _data["offsety"];
            this.angle = _data["angle"];
            this.anglemode = _data["anglemode"];
            this.buffer = _data["buffer"];
            this.align = _data["align"];
            this.wrap = _data["wrap"];
            this.maxlength = _data["maxlength"];
            this.space_size_10 = _data["space_size_10"];
            this.minfeaturesize = _data["minfeaturesize"];
            this.autominfeaturesize = _data["autominfeaturesize"];
            this.minscaledenom = _data["minscaledenom"];
            this.maxscaledenom = _data["maxscaledenom"];
            this.mindistance = _data["mindistance"];
            this.repeatdistance = _data["repeatdistance"];
            this.maxoverlapangle = _data["maxoverlapangle"];
            this.partials = _data["partials"];
            this.force = _data["force"];
            this.encoding = _data["encoding"];
            this.priority = _data["priority"];
            this.numstyles = _data["numstyles"];
            this.sizeunits = _data["sizeunits"];
        }
    }

    static fromJS(data: any): LabelObj {
        data = typeof data === 'object' ? data : {};
        let result = new LabelObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["refcount"] = this.refcount;
        data["font"] = this.font;
        data["color"] = this.color ? this.color.toJSON() : <any>undefined;
        data["outlinecolor"] = this.outlinecolor ? this.outlinecolor.toJSON() : <any>undefined;
        data["outlinewidth"] = this.outlinewidth;
        data["shadowcolor"] = this.shadowcolor ? this.shadowcolor.toJSON() : <any>undefined;
        data["shadowsizex"] = this.shadowsizex;
        data["shadowsizey"] = this.shadowsizey;
        data["size"] = this.size;
        data["minsize"] = this.minsize;
        data["maxsize"] = this.maxsize;
        data["position"] = this.position;
        data["offsetx"] = this.offsetx;
        data["offsety"] = this.offsety;
        data["angle"] = this.angle;
        data["anglemode"] = this.anglemode;
        data["buffer"] = this.buffer;
        data["align"] = this.align;
        data["wrap"] = this.wrap;
        data["maxlength"] = this.maxlength;
        data["space_size_10"] = this.space_size_10;
        data["minfeaturesize"] = this.minfeaturesize;
        data["autominfeaturesize"] = this.autominfeaturesize;
        data["minscaledenom"] = this.minscaledenom;
        data["maxscaledenom"] = this.maxscaledenom;
        data["mindistance"] = this.mindistance;
        data["repeatdistance"] = this.repeatdistance;
        data["maxoverlapangle"] = this.maxoverlapangle;
        data["partials"] = this.partials;
        data["force"] = this.force;
        data["encoding"] = this.encoding;
        data["priority"] = this.priority;
        data["numstyles"] = this.numstyles;
        data["sizeunits"] = this.sizeunits;
        return data;
    }
}

export interface ILabelObj {
    refcount: number;
    font?: string | undefined;
    color?: ColorObj | undefined;
    outlinecolor?: ColorObj | undefined;
    outlinewidth: number;
    shadowcolor?: ColorObj | undefined;
    shadowsizex: number;
    shadowsizey: number;
    size: number;
    minsize: number;
    maxsize: number;
    position: number;
    offsetx: number;
    offsety: number;
    angle: number;
    anglemode: MS_POSITIONS_ENUM;
    buffer: number;
    align: number;
    wrap: string;
    maxlength: number;
    space_size_10: number;
    minfeaturesize: number;
    autominfeaturesize: number;
    minscaledenom: number;
    maxscaledenom: number;
    mindistance: number;
    repeatdistance: number;
    maxoverlapangle: number;
    partials: number;
    force: number;
    encoding?: string | undefined;
    priority: number;
    numstyles: number;
    sizeunits: number;
}

export enum MS_POSITIONS_ENUM {
    MS_UL = 101,
    MS_LR = 102,
    MS_UR = 103,
    MS_LL = 104,
    MS_CR = 105,
    MS_CL = 106,
    MS_UC = 107,
    MS_LC = 108,
    MS_CC = 109,
    MS_AUTO = 110,
    MS_XY = 111,
    MS_NONE = 112,
    MS_AUTO2 = 113,
    MS_FOLLOW = 114,
}

export class LegendObj implements ILegendObj {
    label?: LabelObj | undefined;
    map?: MapObj | undefined;
    transparent!: number;
    imagecolor?: ColorObj | undefined;
    keysizex!: number;
    keysizey!: number;
    keyspacingx!: number;
    keyspacingy!: number;
    outlinecolor?: ColorObj | undefined;
    status!: number;
    height!: number;
    width!: number;
    position!: number;
    postlabelcache!: number;
    template?: string | undefined;

    constructor(data?: ILegendObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.label = _data["label"] ? LabelObj.fromJS(_data["label"]) : <any>undefined;
            this.map = _data["map"] ? MapObj.fromJS(_data["map"]) : <any>undefined;
            this.transparent = _data["transparent"];
            this.imagecolor = _data["imagecolor"] ? ColorObj.fromJS(_data["imagecolor"]) : <any>undefined;
            this.keysizex = _data["keysizex"];
            this.keysizey = _data["keysizey"];
            this.keyspacingx = _data["keyspacingx"];
            this.keyspacingy = _data["keyspacingy"];
            this.outlinecolor = _data["outlinecolor"] ? ColorObj.fromJS(_data["outlinecolor"]) : <any>undefined;
            this.status = _data["status"];
            this.height = _data["height"];
            this.width = _data["width"];
            this.position = _data["position"];
            this.postlabelcache = _data["postlabelcache"];
            this.template = _data["template"];
        }
    }

    static fromJS(data: any): LegendObj {
        data = typeof data === 'object' ? data : {};
        let result = new LegendObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label ? this.label.toJSON() : <any>undefined;
        data["map"] = this.map ? this.map.toJSON() : <any>undefined;
        data["transparent"] = this.transparent;
        data["imagecolor"] = this.imagecolor ? this.imagecolor.toJSON() : <any>undefined;
        data["keysizex"] = this.keysizex;
        data["keysizey"] = this.keysizey;
        data["keyspacingx"] = this.keyspacingx;
        data["keyspacingy"] = this.keyspacingy;
        data["outlinecolor"] = this.outlinecolor ? this.outlinecolor.toJSON() : <any>undefined;
        data["status"] = this.status;
        data["height"] = this.height;
        data["width"] = this.width;
        data["position"] = this.position;
        data["postlabelcache"] = this.postlabelcache;
        data["template"] = this.template;
        return data;
    }
}

export interface ILegendObj {
    label?: LabelObj | undefined;
    map?: MapObj | undefined;
    transparent: number;
    imagecolor?: ColorObj | undefined;
    keysizex: number;
    keysizey: number;
    keyspacingx: number;
    keyspacingy: number;
    outlinecolor?: ColorObj | undefined;
    status: number;
    height: number;
    width: number;
    position: number;
    postlabelcache: number;
    template?: string | undefined;
}

export class QueryMapObj implements IQueryMapObj {
    map?: MapObj | undefined;
    height!: number;
    width!: number;
    status!: number;
    style!: number;
    color?: ColorObj | undefined;

    constructor(data?: IQueryMapObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.map = _data["map"] ? MapObj.fromJS(_data["map"]) : <any>undefined;
            this.height = _data["height"];
            this.width = _data["width"];
            this.status = _data["status"];
            this.style = _data["style"];
            this.color = _data["color"] ? ColorObj.fromJS(_data["color"]) : <any>undefined;
        }
    }

    static fromJS(data: any): QueryMapObj {
        data = typeof data === 'object' ? data : {};
        let result = new QueryMapObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["map"] = this.map ? this.map.toJSON() : <any>undefined;
        data["height"] = this.height;
        data["width"] = this.width;
        data["status"] = this.status;
        data["style"] = this.style;
        data["color"] = this.color ? this.color.toJSON() : <any>undefined;
        return data;
    }
}

export interface IQueryMapObj {
    map?: MapObj | undefined;
    height: number;
    width: number;
    status: number;
    style: number;
    color?: ColorObj | undefined;
}

export class WebObj implements IWebObj {
    metadata?: HashTableObj | undefined;
    validation?: HashTableObj | undefined;
    map?: MapObj | undefined;
    imagepath?: string | undefined;
    imageurl?: string | undefined;
    temppath?: string | undefined;
    header?: string | undefined;
    footer?: string | undefined;
    empty?: string | undefined;
    error?: string | undefined;
    minscaledenom!: number;
    maxscaledenom!: number;
    mintemplate?: string | undefined;
    maxtemplate?: string | undefined;
    queryformat?: string | undefined;
    legendformat?: string | undefined;
    browseformat?: string | undefined;
    template?: string | undefined;

    constructor(data?: IWebObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.metadata = _data["metadata"] ? HashTableObj.fromJS(_data["metadata"]) : <any>undefined;
            this.validation = _data["validation"] ? HashTableObj.fromJS(_data["validation"]) : <any>undefined;
            this.map = _data["map"] ? MapObj.fromJS(_data["map"]) : <any>undefined;
            this.imagepath = _data["imagepath"];
            this.imageurl = _data["imageurl"];
            this.temppath = _data["temppath"];
            this.header = _data["header"];
            this.footer = _data["footer"];
            this.empty = _data["empty"];
            this.error = _data["error"];
            this.minscaledenom = _data["minscaledenom"];
            this.maxscaledenom = _data["maxscaledenom"];
            this.mintemplate = _data["mintemplate"];
            this.maxtemplate = _data["maxtemplate"];
            this.queryformat = _data["queryformat"];
            this.legendformat = _data["legendformat"];
            this.browseformat = _data["browseformat"];
            this.template = _data["template"];
        }
    }

    static fromJS(data: any): WebObj {
        data = typeof data === 'object' ? data : {};
        let result = new WebObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["metadata"] = this.metadata ? this.metadata.toJSON() : <any>undefined;
        data["validation"] = this.validation ? this.validation.toJSON() : <any>undefined;
        data["map"] = this.map ? this.map.toJSON() : <any>undefined;
        data["imagepath"] = this.imagepath;
        data["imageurl"] = this.imageurl;
        data["temppath"] = this.temppath;
        data["header"] = this.header;
        data["footer"] = this.footer;
        data["empty"] = this.empty;
        data["error"] = this.error;
        data["minscaledenom"] = this.minscaledenom;
        data["maxscaledenom"] = this.maxscaledenom;
        data["mintemplate"] = this.mintemplate;
        data["maxtemplate"] = this.maxtemplate;
        data["queryformat"] = this.queryformat;
        data["legendformat"] = this.legendformat;
        data["browseformat"] = this.browseformat;
        data["template"] = this.template;
        return data;
    }
}

export interface IWebObj {
    metadata?: HashTableObj | undefined;
    validation?: HashTableObj | undefined;
    map?: MapObj | undefined;
    imagepath?: string | undefined;
    imageurl?: string | undefined;
    temppath?: string | undefined;
    header?: string | undefined;
    footer?: string | undefined;
    empty?: string | undefined;
    error?: string | undefined;
    minscaledenom: number;
    maxscaledenom: number;
    mintemplate?: string | undefined;
    maxtemplate?: string | undefined;
    queryformat?: string | undefined;
    legendformat?: string | undefined;
    browseformat?: string | undefined;
    template?: string | undefined;
}

export class ConfigObj implements IConfigObj {
    env?: HashTableObj | undefined;
    maps?: HashTableObj | undefined;
    plugins?: HashTableObj | undefined;

    constructor(data?: IConfigObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.env = _data["env"] ? HashTableObj.fromJS(_data["env"]) : <any>undefined;
            this.maps = _data["maps"] ? HashTableObj.fromJS(_data["maps"]) : <any>undefined;
            this.plugins = _data["plugins"] ? HashTableObj.fromJS(_data["plugins"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ConfigObj {
        data = typeof data === 'object' ? data : {};
        let result = new ConfigObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["env"] = this.env ? this.env.toJSON() : <any>undefined;
        data["maps"] = this.maps ? this.maps.toJSON() : <any>undefined;
        data["plugins"] = this.plugins ? this.plugins.toJSON() : <any>undefined;
        return data;
    }
}

export interface IConfigObj {
    env?: HashTableObj | undefined;
    maps?: HashTableObj | undefined;
    plugins?: HashTableObj | undefined;
}

export enum MS_UNITS {
    MS_INCHES = 0,
    MS_FEET = 1,
    MS_MILES = 2,
    MS_METERS = 3,
    MS_KILOMETERS = 4,
    MS_DD = 5,
    MS_PIXELS = 6,
    MS_PERCENTAGES = 7,
    MS_NAUTICALMILES = 8,
    MS_INHERIT = -1,
}

export class SWIGTYPE_p_int implements ISWIGTYPE_p_int {

    constructor(data?: ISWIGTYPE_p_int) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): SWIGTYPE_p_int {
        data = typeof data === 'object' ? data : {};
        let result = new SWIGTYPE_p_int();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface ISWIGTYPE_p_int {
}

export class ClusterObj implements IClusterObj {
    maxdistance!: number;
    buffer!: number;
    region?: string | undefined;

    constructor(data?: IClusterObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxdistance = _data["maxdistance"];
            this.buffer = _data["buffer"];
            this.region = _data["region"];
        }
    }

    static fromJS(data: any): ClusterObj {
        data = typeof data === 'object' ? data : {};
        let result = new ClusterObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxdistance"] = this.maxdistance;
        data["buffer"] = this.buffer;
        data["region"] = this.region;
        return data;
    }
}

export interface IClusterObj {
    maxdistance: number;
    buffer: number;
    region?: string | undefined;
}

export class SWIGTYPE_p_expressionObj implements ISWIGTYPE_p_expressionObj {

    constructor(data?: ISWIGTYPE_p_expressionObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): SWIGTYPE_p_expressionObj {
        data = typeof data === 'object' ? data : {};
        let result = new SWIGTYPE_p_expressionObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface ISWIGTYPE_p_expressionObj {
}

export class LayerCompositer implements ILayerCompositer {
    comp_op!: CompositingOperation;
    opacity!: number;
    filter?: CompositingFilter | undefined;
    next?: LayerCompositer | undefined;

    constructor(data?: ILayerCompositer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.comp_op = _data["comp_op"];
            this.opacity = _data["opacity"];
            this.filter = _data["filter"] ? CompositingFilter.fromJS(_data["filter"]) : <any>undefined;
            this.next = _data["next"] ? LayerCompositer.fromJS(_data["next"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LayerCompositer {
        data = typeof data === 'object' ? data : {};
        let result = new LayerCompositer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["comp_op"] = this.comp_op;
        data["opacity"] = this.opacity;
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["next"] = this.next ? this.next.toJSON() : <any>undefined;
        return data;
    }
}

export interface ILayerCompositer {
    comp_op: CompositingOperation;
    opacity: number;
    filter?: CompositingFilter | undefined;
    next?: LayerCompositer | undefined;
}

export enum CompositingOperation {
    MS_COMPOP_CLEAR = 0,
    MS_COMPOP_SRC = 1,
    MS_COMPOP_DST = 2,
    MS_COMPOP_SRC_OVER = 3,
    MS_COMPOP_DST_OVER = 4,
    MS_COMPOP_SRC_IN = 5,
    MS_COMPOP_DST_IN = 6,
    MS_COMPOP_SRC_OUT = 7,
    MS_COMPOP_DST_OUT = 8,
    MS_COMPOP_SRC_ATOP = 9,
    MS_COMPOP_DST_ATOP = 10,
    MS_COMPOP_XOR = 11,
    MS_COMPOP_PLUS = 12,
    MS_COMPOP_MINUS = 13,
    MS_COMPOP_MULTIPLY = 14,
    MS_COMPOP_SCREEN = 15,
    MS_COMPOP_OVERLAY = 16,
    MS_COMPOP_DARKEN = 17,
    MS_COMPOP_LIGHTEN = 18,
    MS_COMPOP_COLOR_DODGE = 19,
    MS_COMPOP_COLOR_BURN = 20,
    MS_COMPOP_HARD_LIGHT = 21,
    MS_COMPOP_SOFT_LIGHT = 22,
    MS_COMPOP_DIFFERENCE = 23,
    MS_COMPOP_EXCLUSION = 24,
    MS_COMPOP_CONTRAST = 25,
    MS_COMPOP_INVERT = 26,
    MS_COMPOP_INVERT_RGB = 27,
}

export class CompositingFilter implements ICompositingFilter {
    filter?: string | undefined;
    next?: CompositingFilter | undefined;

    constructor(data?: ICompositingFilter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.filter = _data["filter"];
            this.next = _data["next"] ? CompositingFilter.fromJS(_data["next"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CompositingFilter {
        data = typeof data === 'object' ? data : {};
        let result = new CompositingFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filter"] = this.filter;
        data["next"] = this.next ? this.next.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICompositingFilter {
    filter?: string | undefined;
    next?: CompositingFilter | undefined;
}

export enum MS_RENDER_MODE {
    MS_FIRST_MATCHING_CLASS = 0,
    MS_ALL_MATCHING_CLASSES = 1,
}

export enum MS_LAYER_TYPE {
    MS_LAYER_POINT = 0,
    MS_LAYER_LINE = 1,
    MS_LAYER_POLYGON = 2,
    MS_LAYER_RASTER = 3,
    MS_LAYER_ANNOTATION = 4,
    MS_LAYER_QUERY = 5,
    MS_LAYER_CIRCLE = 6,
    MS_LAYER_TILEINDEX = 7,
    MS_LAYER_CHART = 8,
}

export enum MS_CONNECTION_TYPE {
    MS_INLINE = 0,
    MS_SHAPEFILE = 1,
    MS_TILED_SHAPEFILE = 2,
    MS_UNUSED_2 = 3,
    MS_OGR = 4,
    MS_UNUSED_1 = 5,
    MS_POSTGIS = 6,
    MS_WMS = 7,
    MS_ORACLESPATIAL = 8,
    MS_WFS = 9,
    MS_GRATICULE = 10,
    MS_MYSQL = 11,
    MS_RASTER = 12,
    MS_PLUGIN = 13,
    MS_UNION = 14,
    MS_UVRASTER = 15,
    MS_CONTOUR = 16,
    MS_KERNELDENSITY = 17,
    MS_IDW = 18,
    MS_FLATGEOBUF = 19,
}

export class LabelLeaderObj implements ILabelLeaderObj {
    numstyles!: number;
    maxdistance!: number;
    gridstep!: number;

    constructor(data?: ILabelLeaderObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.numstyles = _data["numstyles"];
            this.maxdistance = _data["maxdistance"];
            this.gridstep = _data["gridstep"];
        }
    }

    static fromJS(data: any): LabelLeaderObj {
        data = typeof data === 'object' ? data : {};
        let result = new LabelLeaderObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["numstyles"] = this.numstyles;
        data["maxdistance"] = this.maxdistance;
        data["gridstep"] = this.gridstep;
        return data;
    }
}

export interface ILabelLeaderObj {
    numstyles: number;
    maxdistance: number;
    gridstep: number;
}

export enum DBFFieldType {
    FTString = 0,
    FTInteger = 1,
    FTDouble = 2,
    FTInvalid = 3,
}

export class DBFInfo implements IDBFInfo {
    nRecords!: number;
    nFields!: number;

    constructor(data?: IDBFInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nRecords = _data["nRecords"];
            this.nFields = _data["nFields"];
        }
    }

    static fromJS(data: any): DBFInfo {
        data = typeof data === 'object' ? data : {};
        let result = new DBFInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nRecords"] = this.nRecords;
        data["nFields"] = this.nFields;
        return data;
    }
}

export interface IDBFInfo {
    nRecords: number;
    nFields: number;
}

export enum DebugLevel {
    MS_DEBUGLEVEL_ERRORSONLY = 0,
    MS_DEBUGLEVEL_DEBUG = 1,
    MS_DEBUGLEVEL_TUNING = 2,
    MS_DEBUGLEVEL_V = 3,
    MS_DEBUGLEVEL_VV = 4,
    MS_DEBUGLEVEL_VVV = 5,
    MS_DEBUGLEVEL_DEVDEBUG = 20,
}

export class ErrorObj implements IErrorObj {
    code!: number;
    routine?: string | undefined;
    message?: string | undefined;
    isreported!: number;
    errorcount!: number;

    constructor(data?: IErrorObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.routine = _data["routine"];
            this.message = _data["message"];
            this.isreported = _data["isreported"];
            this.errorcount = _data["errorcount"];
        }
    }

    static fromJS(data: any): ErrorObj {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["routine"] = this.routine;
        data["message"] = this.message;
        data["isreported"] = this.isreported;
        data["errorcount"] = this.errorcount;
        return data;
    }
}

export interface IErrorObj {
    code: number;
    routine?: string | undefined;
    message?: string | undefined;
    isreported: number;
    errorcount: number;
}

export class ImageObj implements IImageObj {
    width!: number;
    height!: number;
    resolution!: number;
    resolutionfactor!: number;
    imagepath?: string | undefined;
    imageurl?: string | undefined;
    format?: OutputFormatObj | undefined;

    constructor(data?: IImageObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.width = _data["width"];
            this.height = _data["height"];
            this.resolution = _data["resolution"];
            this.resolutionfactor = _data["resolutionfactor"];
            this.imagepath = _data["imagepath"];
            this.imageurl = _data["imageurl"];
            this.format = _data["format"] ? OutputFormatObj.fromJS(_data["format"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ImageObj {
        data = typeof data === 'object' ? data : {};
        let result = new ImageObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["width"] = this.width;
        data["height"] = this.height;
        data["resolution"] = this.resolution;
        data["resolutionfactor"] = this.resolutionfactor;
        data["imagepath"] = this.imagepath;
        data["imageurl"] = this.imageurl;
        data["format"] = this.format ? this.format.toJSON() : <any>undefined;
        return data;
    }
}

export interface IImageObj {
    width: number;
    height: number;
    resolution: number;
    resolutionfactor: number;
    imagepath?: string | undefined;
    imageurl?: string | undefined;
    format?: OutputFormatObj | undefined;
}

export class Intarray implements IIntarray {

    constructor(data?: IIntarray) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Intarray {
        data = typeof data === 'object' ? data : {};
        let result = new Intarray();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIntarray {
}

export class LabelCacheMemberObj implements ILabelCacheMemberObj {
    numtextsymbols!: number;
    layerindex!: number;
    classindex!: number;
    status!: number;
    markerid!: number;
    point?: PointObj | undefined;
    bbox?: RectObj | undefined;
    leaderline?: LineObj | undefined;
    leaderbbox?: RectObj | undefined;

    constructor(data?: ILabelCacheMemberObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.numtextsymbols = _data["numtextsymbols"];
            this.layerindex = _data["layerindex"];
            this.classindex = _data["classindex"];
            this.status = _data["status"];
            this.markerid = _data["markerid"];
            this.point = _data["point"] ? PointObj.fromJS(_data["point"]) : <any>undefined;
            this.bbox = _data["bbox"] ? RectObj.fromJS(_data["bbox"]) : <any>undefined;
            this.leaderline = _data["leaderline"] ? LineObj.fromJS(_data["leaderline"]) : <any>undefined;
            this.leaderbbox = _data["leaderbbox"] ? RectObj.fromJS(_data["leaderbbox"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LabelCacheMemberObj {
        data = typeof data === 'object' ? data : {};
        let result = new LabelCacheMemberObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["numtextsymbols"] = this.numtextsymbols;
        data["layerindex"] = this.layerindex;
        data["classindex"] = this.classindex;
        data["status"] = this.status;
        data["markerid"] = this.markerid;
        data["point"] = this.point ? this.point.toJSON() : <any>undefined;
        data["bbox"] = this.bbox ? this.bbox.toJSON() : <any>undefined;
        data["leaderline"] = this.leaderline ? this.leaderline.toJSON() : <any>undefined;
        data["leaderbbox"] = this.leaderbbox ? this.leaderbbox.toJSON() : <any>undefined;
        return data;
    }
}

export interface ILabelCacheMemberObj {
    numtextsymbols: number;
    layerindex: number;
    classindex: number;
    status: number;
    markerid: number;
    point?: PointObj | undefined;
    bbox?: RectObj | undefined;
    leaderline?: LineObj | undefined;
    leaderbbox?: RectObj | undefined;
}

export class PointObj implements IPointObj {
    x!: number;
    y!: number;
    z!: number;
    m!: number;

    constructor(data?: IPointObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.x = _data["x"];
            this.y = _data["y"];
            this.z = _data["z"];
            this.m = _data["m"];
        }
    }

    static fromJS(data: any): PointObj {
        data = typeof data === 'object' ? data : {};
        let result = new PointObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["x"] = this.x;
        data["y"] = this.y;
        data["z"] = this.z;
        data["m"] = this.m;
        return data;
    }
}

export interface IPointObj {
    x: number;
    y: number;
    z: number;
    m: number;
}

export class LineObj implements ILineObj {
    numpoints!: number;

    constructor(data?: ILineObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.numpoints = _data["numpoints"];
        }
    }

    static fromJS(data: any): LineObj {
        data = typeof data === 'object' ? data : {};
        let result = new LineObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["numpoints"] = this.numpoints;
        return data;
    }
}

export interface ILineObj {
    numpoints: number;
}

export class LabelCacheSlotObj implements ILabelCacheSlotObj {
    numlabels!: number;
    cachesize!: number;
    nummarkers!: number;
    markercachesize!: number;
    labels?: LabelCacheMemberObj | undefined;
    markers?: MarkerCacheMemberObj | undefined;

    constructor(data?: ILabelCacheSlotObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.numlabels = _data["numlabels"];
            this.cachesize = _data["cachesize"];
            this.nummarkers = _data["nummarkers"];
            this.markercachesize = _data["markercachesize"];
            this.labels = _data["labels"] ? LabelCacheMemberObj.fromJS(_data["labels"]) : <any>undefined;
            this.markers = _data["markers"] ? MarkerCacheMemberObj.fromJS(_data["markers"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LabelCacheSlotObj {
        data = typeof data === 'object' ? data : {};
        let result = new LabelCacheSlotObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["numlabels"] = this.numlabels;
        data["cachesize"] = this.cachesize;
        data["nummarkers"] = this.nummarkers;
        data["markercachesize"] = this.markercachesize;
        data["labels"] = this.labels ? this.labels.toJSON() : <any>undefined;
        data["markers"] = this.markers ? this.markers.toJSON() : <any>undefined;
        return data;
    }
}

export interface ILabelCacheSlotObj {
    numlabels: number;
    cachesize: number;
    nummarkers: number;
    markercachesize: number;
    labels?: LabelCacheMemberObj | undefined;
    markers?: MarkerCacheMemberObj | undefined;
}

export class MarkerCacheMemberObj implements IMarkerCacheMemberObj {
    id!: number;
    bounds?: RectObj | undefined;

    constructor(data?: IMarkerCacheMemberObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.bounds = _data["bounds"] ? RectObj.fromJS(_data["bounds"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MarkerCacheMemberObj {
        data = typeof data === 'object' ? data : {};
        let result = new MarkerCacheMemberObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["bounds"] = this.bounds ? this.bounds.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMarkerCacheMemberObj {
    id: number;
    bounds?: RectObj | undefined;
}

export class Mapscript implements IMapscript {

    constructor(data?: IMapscript) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Mapscript {
        data = typeof data === 'object' ? data : {};
        let result = new Mapscript();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IMapscript {
}

export enum MS_ALIGN_VALUE {
    MS_ALIGN_DEFAULT = 0,
    MS_ALIGN_LEFT = 1,
    MS_ALIGN_CENTER = 2,
    MS_ALIGN_RIGHT = 3,
}

export enum MS_CAPS_JOINS_AND_CORNERS {
    MS_CJC_NONE = 0,
    MS_CJC_BEVEL = 1,
    MS_CJC_BUTT = 2,
    MS_CJC_MITER = 3,
    MS_CJC_ROUND = 4,
    MS_CJC_SQUARE = 5,
    MS_CJC_TRIANGLE = 6,
}

export enum MS_CONFIG_SECTIONS {
    MS_CONFIG_SECTION = 3000,
    MS_CONFIG_SECTION_ENV = 3001,
    MS_CONFIG_SECTION_MAPS = 3002,
    MS_CONFIG_SECTION_PLUGINS = 3003,
}

export enum MS_FILE_TYPE {
    MS_FILE_MAP = 0,
    MS_FILE_SYMBOL = 1,
}

export enum MS_FONT_TYPE {
    MS_TRUETYPE = 0,
    MS_BITMAP = 1,
}

export enum MS_GEOS_OPERATOR {
    MS_GEOS_EQUALS = 0,
    MS_GEOS_DISJOINT = 1,
    MS_GEOS_TOUCHES = 2,
    MS_GEOS_OVERLAPS = 3,
    MS_GEOS_CROSSES = 4,
    MS_GEOS_INTERSECTS = 5,
    MS_GEOS_WITHIN = 6,
    MS_GEOS_CONTAINS = 7,
    MS_GEOS_BEYOND = 8,
    MS_GEOS_DWITHIN = 9,
}

export enum MS_IMAGEMODE {
    MS_IMAGEMODE_PC256 = 0,
    MS_IMAGEMODE_RGB = 1,
    MS_IMAGEMODE_RGBA = 2,
    MS_IMAGEMODE_INT16 = 3,
    MS_IMAGEMODE_FLOAT32 = 4,
    MS_IMAGEMODE_BYTE = 5,
    MS_IMAGEMODE_FEATURE = 6,
    MS_IMAGEMODE_NULL = 7,
}

export enum MS_JOIN_CONNECTION_TYPE {
    MS_DB_XBASE = 0,
    MS_DB_CSV = 1,
    MS_DB_MYSQL = 2,
    MS_DB_ORACLE = 3,
    MS_DB_POSTGRES = 4,
}

export enum MS_JOIN_TYPE {
    MS_JOIN_ONE_TO_ONE = 0,
    MS_JOIN_ONE_TO_MANY = 1,
}

export enum MS_LABEL_BINDING_ENUM {
    MS_LABEL_BINDING_SIZE = 0,
    MS_LABEL_BINDING_ANGLE = 1,
    MS_LABEL_BINDING_COLOR = 2,
    MS_LABEL_BINDING_OUTLINECOLOR = 3,
    MS_LABEL_BINDING_FONT = 4,
    MS_LABEL_BINDING_PRIORITY = 5,
    MS_LABEL_BINDING_POSITION = 6,
    MS_LABEL_BINDING_SHADOWSIZEX = 7,
    MS_LABEL_BINDING_SHADOWSIZEY = 8,
    MS_LABEL_BINDING_OFFSET_X = 9,
    MS_LABEL_BINDING_OFFSET_Y = 10,
    MS_LABEL_BINDING_ALIGN = 11,
}

export enum MS_NUM_CHECK_TYPES {
    MS_NUM_CHECK_NONE = 0,
    MS_NUM_CHECK_RANGE = 1,
    MS_NUM_CHECK_GT = 2,
    MS_NUM_CHECK_GTE = 3,
}

export enum MS_PARSE_TYPE_ENUM {
    MS_PARSE_TYPE_BOOLEAN = 0,
    MS_PARSE_TYPE_STRING = 1,
    MS_PARSE_TYPE_SHAPE = 2,
    MS_PARSE_TYPE_SLD = 3,
}

export enum MS_QUERY_MODE {
    MS_QUERY_SINGLE = 0,
    MS_QUERY_MULTIPLE = 1,
}

export enum MS_QUERY_TYPE {
    MS_QUERY_IS_NULL = 0,
    MS_QUERY_BY_POINT = 1,
    MS_QUERY_BY_RECT = 2,
    MS_QUERY_BY_SHAPE = 3,
    MS_QUERY_BY_ATTRIBUTE = 4,
    MS_QUERY_BY_INDEX = 5,
    MS_QUERY_BY_FILTER = 6,
}

export enum MS_QUERYMAP_STYLES {
    MS_NORMAL = 0,
    MS_HILITE = 1,
    MS_SELECTED = 2,
}

export enum MS_REQUEST_TYPE {
    MS_GET_REQUEST = 0,
    MS_POST_REQUEST = 1,
}

export enum MS_RETURN_VALUE {
    MS_SUCCESS = 0,
    MS_FAILURE = 1,
    MS_DONE = 2,
}

export enum MS_SHAPE_TYPE {
    MS_SHAPE_POINT = 0,
    MS_SHAPE_LINE = 1,
    MS_SHAPE_POLYGON = 2,
    MS_SHAPE_NULL = 3,
}

export enum MS_STYLE_BINDING_ENUM {
    MS_STYLE_BINDING_SIZE = 0,
    MS_STYLE_BINDING_WIDTH = 1,
    MS_STYLE_BINDING_ANGLE = 2,
    MS_STYLE_BINDING_COLOR = 3,
    MS_STYLE_BINDING_OUTLINECOLOR = 4,
    MS_STYLE_BINDING_SYMBOL = 5,
    MS_STYLE_BINDING_OUTLINEWIDTH = 6,
    MS_STYLE_BINDING_OPACITY = 7,
    MS_STYLE_BINDING_OFFSET_X = 8,
    MS_STYLE_BINDING_OFFSET_Y = 9,
    MS_STYLE_BINDING_POLAROFFSET_PIXEL = 10,
    MS_STYLE_BINDING_POLAROFFSET_ANGLE = 11,
}

export enum MS_TOKEN_BINDING_ENUM {
    MS_TOKEN_BINDING_DOUBLE = 380,
    MS_TOKEN_BINDING_INTEGER = 381,
    MS_TOKEN_BINDING_STRING = 382,
    MS_TOKEN_BINDING_TIME = 383,
    MS_TOKEN_BINDING_SHAPE = 384,
    MS_TOKEN_BINDING_MAP_CELLSIZE = 385,
    MS_TOKEN_BINDING_DATA_CELLSIZE = 386,
}

export enum MS_SYMBOL_TYPE {
    MS_SYMBOL_SIMPLE = 1000,
    MS_SYMBOL_VECTOR = 1001,
    MS_SYMBOL_ELLIPSE = 1002,
    MS_SYMBOL_PIXMAP = 1003,
    MS_SYMBOL_TRUETYPE = 1004,
    MS_SYMBOL_HATCH = 1005,
    MS_SYMBOL_SVG = 1006,
}

export enum MS_TOKEN_COMPARISON_ENUM {
    MS_TOKEN_COMPARISON_EQ = 320,
    MS_TOKEN_COMPARISON_NE = 321,
    MS_TOKEN_COMPARISON_GT = 322,
    MS_TOKEN_COMPARISON_LT = 323,
    MS_TOKEN_COMPARISON_LE = 324,
    MS_TOKEN_COMPARISON_GE = 325,
    MS_TOKEN_COMPARISON_IEQ = 326,
    MS_TOKEN_COMPARISON_RE = 327,
    MS_TOKEN_COMPARISON_IRE = 328,
    MS_TOKEN_COMPARISON_IN = 329,
    MS_TOKEN_COMPARISON_LIKE = 330,
    MS_TOKEN_COMPARISON_INTERSECTS = 331,
    MS_TOKEN_COMPARISON_DISJOINT = 332,
    MS_TOKEN_COMPARISON_TOUCHES = 333,
    MS_TOKEN_COMPARISON_OVERLAPS = 334,
    MS_TOKEN_COMPARISON_CROSSES = 335,
    MS_TOKEN_COMPARISON_WITHIN = 336,
    MS_TOKEN_COMPARISON_CONTAINS = 337,
    MS_TOKEN_COMPARISON_EQUALS = 338,
    MS_TOKEN_COMPARISON_BEYOND = 339,
    MS_TOKEN_COMPARISON_DWITHIN = 340,
}

export enum MS_TOKEN_FUNCTION_ENUM {
    MS_TOKEN_FUNCTION_LENGTH = 350,
    MS_TOKEN_FUNCTION_TOSTRING = 351,
    MS_TOKEN_FUNCTION_COMMIFY = 352,
    MS_TOKEN_FUNCTION_AREA = 353,
    MS_TOKEN_FUNCTION_ROUND = 354,
    MS_TOKEN_FUNCTION_FROMTEXT = 355,
    MS_TOKEN_FUNCTION_BUFFER = 356,
    MS_TOKEN_FUNCTION_DIFFERENCE = 357,
    MS_TOKEN_FUNCTION_SIMPLIFY = 358,
    MS_TOKEN_FUNCTION_SIMPLIFYPT = 359,
    MS_TOKEN_FUNCTION_GENERALIZE = 360,
    MS_TOKEN_FUNCTION_SMOOTHSIA = 361,
    MS_TOKEN_FUNCTION_CENTERLINE = 362,
    MS_TOKEN_FUNCTION_DENSIFY = 363,
    MS_TOKEN_FUNCTION_OUTER = 364,
    MS_TOKEN_FUNCTION_INNER = 365,
    MS_TOKEN_FUNCTION_JAVASCRIPT = 366,
    MS_TOKEN_FUNCTION_UPPER = 367,
    MS_TOKEN_FUNCTION_LOWER = 368,
    MS_TOKEN_FUNCTION_INITCAP = 369,
    MS_TOKEN_FUNCTION_FIRSTCAP = 370,
}

export enum MS_TOKEN_LITERAL_ENUM {
    MS_TOKEN_LITERAL_NUMBER = 310,
    MS_TOKEN_LITERAL_STRING = 311,
    MS_TOKEN_LITERAL_TIME = 312,
    MS_TOKEN_LITERAL_SHAPE = 313,
    MS_TOKEN_LITERAL_BOOLEAN = 314,
}

export enum MS_TOKEN_LOGICAL_ENUM {
    MS_TOKEN_LOGICAL_AND = 300,
    MS_TOKEN_LOGICAL_OR = 301,
    MS_TOKEN_LOGICAL_NOT = 302,
}

export enum MS_TRANSFORM_MODE {
    MS_TRANSFORM_NONE = 0,
    MS_TRANSFORM_ROUND = 1,
    MS_TRANSFORM_SNAPTOGRID = 2,
    MS_TRANSFORM_FULLRESOLUTION = 3,
    MS_TRANSFORM_SIMPLIFY = 4,
}

export class OWSRequest implements IOWSRequest {
    numParams!: number;
    type!: MS_REQUEST_TYPE;
    contenttype?: string | undefined;
    postrequest?: string | undefined;
    httpcookiedata?: string | undefined;

    constructor(data?: IOWSRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.numParams = _data["NumParams"];
            this.type = _data["type"];
            this.contenttype = _data["contenttype"];
            this.postrequest = _data["postrequest"];
            this.httpcookiedata = _data["httpcookiedata"];
        }
    }

    static fromJS(data: any): OWSRequest {
        data = typeof data === 'object' ? data : {};
        let result = new OWSRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["NumParams"] = this.numParams;
        data["type"] = this.type;
        data["contenttype"] = this.contenttype;
        data["postrequest"] = this.postrequest;
        data["httpcookiedata"] = this.httpcookiedata;
        return data;
    }
}

export interface IOWSRequest {
    numParams: number;
    type: MS_REQUEST_TYPE;
    contenttype?: string | undefined;
    postrequest?: string | undefined;
    httpcookiedata?: string | undefined;
}

export class ProjectionObj implements IProjectionObj {
    numargs!: number;
    automatic!: number;
    wellknownprojection!: number;

    constructor(data?: IProjectionObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.numargs = _data["numargs"];
            this.automatic = _data["automatic"];
            this.wellknownprojection = _data["wellknownprojection"];
        }
    }

    static fromJS(data: any): ProjectionObj {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectionObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["numargs"] = this.numargs;
        data["automatic"] = this.automatic;
        data["wellknownprojection"] = this.wellknownprojection;
        return data;
    }
}

export interface IProjectionObj {
    numargs: number;
    automatic: number;
    wellknownprojection: number;
}

export class ReprojectionObj implements IReprojectionObj {

    constructor(data?: IReprojectionObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ReprojectionObj {
        data = typeof data === 'object' ? data : {};
        let result = new ReprojectionObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IReprojectionObj {
}

export class ResultCacheObj implements IResultCacheObj {
    numresults!: number;
    bounds?: RectObj | undefined;

    constructor(data?: IResultCacheObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.numresults = _data["numresults"];
            this.bounds = _data["bounds"] ? RectObj.fromJS(_data["bounds"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ResultCacheObj {
        data = typeof data === 'object' ? data : {};
        let result = new ResultCacheObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["numresults"] = this.numresults;
        data["bounds"] = this.bounds ? this.bounds.toJSON() : <any>undefined;
        return data;
    }
}

export interface IResultCacheObj {
    numresults: number;
    bounds?: RectObj | undefined;
}

export class ResultObj implements IResultObj {
    shapeindex!: number;
    tileindex!: number;
    resultindex!: number;
    classindex!: number;

    constructor(data?: IResultObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shapeindex = _data["shapeindex"];
            this.tileindex = _data["tileindex"];
            this.resultindex = _data["resultindex"];
            this.classindex = _data["classindex"];
        }
    }

    static fromJS(data: any): ResultObj {
        data = typeof data === 'object' ? data : {};
        let result = new ResultObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shapeindex"] = this.shapeindex;
        data["tileindex"] = this.tileindex;
        data["resultindex"] = this.resultindex;
        data["classindex"] = this.classindex;
        return data;
    }
}

export interface IResultObj {
    shapeindex: number;
    tileindex: number;
    resultindex: number;
    classindex: number;
}

export class ScaleTokenEntryObj implements IScaleTokenEntryObj {
    minscale!: number;
    maxscale!: number;
    value?: string | undefined;

    constructor(data?: IScaleTokenEntryObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.minscale = _data["minscale"];
            this.maxscale = _data["maxscale"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ScaleTokenEntryObj {
        data = typeof data === 'object' ? data : {};
        let result = new ScaleTokenEntryObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["minscale"] = this.minscale;
        data["maxscale"] = this.maxscale;
        data["value"] = this.value;
        return data;
    }
}

export interface IScaleTokenEntryObj {
    minscale: number;
    maxscale: number;
    value?: string | undefined;
}

export class ScaleTokenObj implements IScaleTokenObj {
    name?: string | undefined;
    n_entries!: number;
    tokens?: ScaleTokenEntryObj | undefined;

    constructor(data?: IScaleTokenObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.n_entries = _data["n_entries"];
            this.tokens = _data["tokens"] ? ScaleTokenEntryObj.fromJS(_data["tokens"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ScaleTokenObj {
        data = typeof data === 'object' ? data : {};
        let result = new ScaleTokenObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["n_entries"] = this.n_entries;
        data["tokens"] = this.tokens ? this.tokens.toJSON() : <any>undefined;
        return data;
    }
}

export interface IScaleTokenObj {
    name?: string | undefined;
    n_entries: number;
    tokens?: ScaleTokenEntryObj | undefined;
}

export class ShapefileObj implements IShapefileObj {
    type!: number;
    numshapes!: number;
    bounds?: RectObj | undefined;

    constructor(data?: IShapefileObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.numshapes = _data["numshapes"];
            this.bounds = _data["bounds"] ? RectObj.fromJS(_data["bounds"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ShapefileObj {
        data = typeof data === 'object' ? data : {};
        let result = new ShapefileObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["numshapes"] = this.numshapes;
        data["bounds"] = this.bounds ? this.bounds.toJSON() : <any>undefined;
        return data;
    }
}

export interface IShapefileObj {
    type: number;
    numshapes: number;
    bounds?: RectObj | undefined;
}

export class ShapeObj implements IShapeObj {
    numlines!: number;
    numvalues!: number;
    bounds?: RectObj | undefined;
    type!: number;
    index!: number;
    tileindex!: number;
    classindex!: number;
    text?: string | undefined;
    scratch!: number;
    resultindex!: number;

    constructor(data?: IShapeObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.numlines = _data["numlines"];
            this.numvalues = _data["numvalues"];
            this.bounds = _data["bounds"] ? RectObj.fromJS(_data["bounds"]) : <any>undefined;
            this.type = _data["type"];
            this.index = _data["index"];
            this.tileindex = _data["tileindex"];
            this.classindex = _data["classindex"];
            this.text = _data["text"];
            this.scratch = _data["scratch"];
            this.resultindex = _data["resultindex"];
        }
    }

    static fromJS(data: any): ShapeObj {
        data = typeof data === 'object' ? data : {};
        let result = new ShapeObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["numlines"] = this.numlines;
        data["numvalues"] = this.numvalues;
        data["bounds"] = this.bounds ? this.bounds.toJSON() : <any>undefined;
        data["type"] = this.type;
        data["index"] = this.index;
        data["tileindex"] = this.tileindex;
        data["classindex"] = this.classindex;
        data["text"] = this.text;
        data["scratch"] = this.scratch;
        data["resultindex"] = this.resultindex;
        return data;
    }
}

export interface IShapeObj {
    numlines: number;
    numvalues: number;
    bounds?: RectObj | undefined;
    type: number;
    index: number;
    tileindex: number;
    classindex: number;
    text?: string | undefined;
    scratch: number;
    resultindex: number;
}

export class StyleObj implements IStyleObj {
    refcount!: number;
    symbolname?: string | undefined;
    patternlength!: number;
    pattern?: number[] | undefined;
    angle!: number;
    autoangle!: number;
    antialiased!: number;
    color?: ColorObj | undefined;
    outlinecolor?: ColorObj | undefined;
    opacity!: number;
    mincolor?: ColorObj | undefined;
    maxcolor?: ColorObj | undefined;
    minvalue!: number;
    maxvalue!: number;
    rangeitem?: string | undefined;
    rangeitemindex!: number;
    symbol!: number;
    size!: number;
    minsize!: number;
    maxsize!: number;
    gap!: number;
    initialgap!: number;
    linecap!: number;
    linejoin!: number;
    linejoinmaxsize!: number;
    width!: number;
    outlinewidth!: number;
    minwidth!: number;
    maxwidth!: number;
    offsetx!: number;
    offsety!: number;
    polaroffsetpixel!: number;
    polaroffsetangle!: number;
    minscaledenom!: number;
    maxscaledenom!: number;
    sizeunits!: number;

    constructor(data?: IStyleObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.refcount = _data["refcount"];
            this.symbolname = _data["symbolname"];
            this.patternlength = _data["patternlength"];
            if (Array.isArray(_data["pattern"])) {
                this.pattern = [] as any;
                for (let item of _data["pattern"])
                    this.pattern!.push(item);
            }
            this.angle = _data["angle"];
            this.autoangle = _data["autoangle"];
            this.antialiased = _data["antialiased"];
            this.color = _data["color"] ? ColorObj.fromJS(_data["color"]) : <any>undefined;
            this.outlinecolor = _data["outlinecolor"] ? ColorObj.fromJS(_data["outlinecolor"]) : <any>undefined;
            this.opacity = _data["opacity"];
            this.mincolor = _data["mincolor"] ? ColorObj.fromJS(_data["mincolor"]) : <any>undefined;
            this.maxcolor = _data["maxcolor"] ? ColorObj.fromJS(_data["maxcolor"]) : <any>undefined;
            this.minvalue = _data["minvalue"];
            this.maxvalue = _data["maxvalue"];
            this.rangeitem = _data["rangeitem"];
            this.rangeitemindex = _data["rangeitemindex"];
            this.symbol = _data["symbol"];
            this.size = _data["size"];
            this.minsize = _data["minsize"];
            this.maxsize = _data["maxsize"];
            this.gap = _data["gap"];
            this.initialgap = _data["initialgap"];
            this.linecap = _data["linecap"];
            this.linejoin = _data["linejoin"];
            this.linejoinmaxsize = _data["linejoinmaxsize"];
            this.width = _data["width"];
            this.outlinewidth = _data["outlinewidth"];
            this.minwidth = _data["minwidth"];
            this.maxwidth = _data["maxwidth"];
            this.offsetx = _data["offsetx"];
            this.offsety = _data["offsety"];
            this.polaroffsetpixel = _data["polaroffsetpixel"];
            this.polaroffsetangle = _data["polaroffsetangle"];
            this.minscaledenom = _data["minscaledenom"];
            this.maxscaledenom = _data["maxscaledenom"];
            this.sizeunits = _data["sizeunits"];
        }
    }

    static fromJS(data: any): StyleObj {
        data = typeof data === 'object' ? data : {};
        let result = new StyleObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["refcount"] = this.refcount;
        data["symbolname"] = this.symbolname;
        data["patternlength"] = this.patternlength;
        if (Array.isArray(this.pattern)) {
            data["pattern"] = [];
            for (let item of this.pattern)
                data["pattern"].push(item);
        }
        data["angle"] = this.angle;
        data["autoangle"] = this.autoangle;
        data["antialiased"] = this.antialiased;
        data["color"] = this.color ? this.color.toJSON() : <any>undefined;
        data["outlinecolor"] = this.outlinecolor ? this.outlinecolor.toJSON() : <any>undefined;
        data["opacity"] = this.opacity;
        data["mincolor"] = this.mincolor ? this.mincolor.toJSON() : <any>undefined;
        data["maxcolor"] = this.maxcolor ? this.maxcolor.toJSON() : <any>undefined;
        data["minvalue"] = this.minvalue;
        data["maxvalue"] = this.maxvalue;
        data["rangeitem"] = this.rangeitem;
        data["rangeitemindex"] = this.rangeitemindex;
        data["symbol"] = this.symbol;
        data["size"] = this.size;
        data["minsize"] = this.minsize;
        data["maxsize"] = this.maxsize;
        data["gap"] = this.gap;
        data["initialgap"] = this.initialgap;
        data["linecap"] = this.linecap;
        data["linejoin"] = this.linejoin;
        data["linejoinmaxsize"] = this.linejoinmaxsize;
        data["width"] = this.width;
        data["outlinewidth"] = this.outlinewidth;
        data["minwidth"] = this.minwidth;
        data["maxwidth"] = this.maxwidth;
        data["offsetx"] = this.offsetx;
        data["offsety"] = this.offsety;
        data["polaroffsetpixel"] = this.polaroffsetpixel;
        data["polaroffsetangle"] = this.polaroffsetangle;
        data["minscaledenom"] = this.minscaledenom;
        data["maxscaledenom"] = this.maxscaledenom;
        data["sizeunits"] = this.sizeunits;
        return data;
    }
}

export interface IStyleObj {
    refcount: number;
    symbolname?: string | undefined;
    patternlength: number;
    pattern?: number[] | undefined;
    angle: number;
    autoangle: number;
    antialiased: number;
    color?: ColorObj | undefined;
    outlinecolor?: ColorObj | undefined;
    opacity: number;
    mincolor?: ColorObj | undefined;
    maxcolor?: ColorObj | undefined;
    minvalue: number;
    maxvalue: number;
    rangeitem?: string | undefined;
    rangeitemindex: number;
    symbol: number;
    size: number;
    minsize: number;
    maxsize: number;
    gap: number;
    initialgap: number;
    linecap: number;
    linejoin: number;
    linejoinmaxsize: number;
    width: number;
    outlinewidth: number;
    minwidth: number;
    maxwidth: number;
    offsetx: number;
    offsety: number;
    polaroffsetpixel: number;
    polaroffsetangle: number;
    minscaledenom: number;
    maxscaledenom: number;
    sizeunits: number;
}

export class SWIGTYPE_p_double implements ISWIGTYPE_p_double {

    constructor(data?: ISWIGTYPE_p_double) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): SWIGTYPE_p_double {
        data = typeof data === 'object' ? data : {};
        let result = new SWIGTYPE_p_double();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface ISWIGTYPE_p_double {
}

export class SymbolObj implements ISymbolObj {
    refcount!: number;
    numpoints!: number;
    imagepath?: string | undefined;
    name?: string | undefined;
    type!: number;
    inmapfile!: number;
    sizex!: number;
    sizey!: number;
    minx!: number;
    miny!: number;
    maxx!: number;
    maxy!: number;
    filled!: number;
    anchorpoint_x!: number;
    anchorpoint_y!: number;
    transparent!: number;
    transparentcolor!: number;
    character?: string | undefined;
    font?: string | undefined;

    constructor(data?: ISymbolObj) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.refcount = _data["refcount"];
            this.numpoints = _data["numpoints"];
            this.imagepath = _data["imagepath"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.inmapfile = _data["inmapfile"];
            this.sizex = _data["sizex"];
            this.sizey = _data["sizey"];
            this.minx = _data["minx"];
            this.miny = _data["miny"];
            this.maxx = _data["maxx"];
            this.maxy = _data["maxy"];
            this.filled = _data["filled"];
            this.anchorpoint_x = _data["anchorpoint_x"];
            this.anchorpoint_y = _data["anchorpoint_y"];
            this.transparent = _data["transparent"];
            this.transparentcolor = _data["transparentcolor"];
            this.character = _data["character"];
            this.font = _data["font"];
        }
    }

    static fromJS(data: any): SymbolObj {
        data = typeof data === 'object' ? data : {};
        let result = new SymbolObj();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["refcount"] = this.refcount;
        data["numpoints"] = this.numpoints;
        data["imagepath"] = this.imagepath;
        data["name"] = this.name;
        data["type"] = this.type;
        data["inmapfile"] = this.inmapfile;
        data["sizex"] = this.sizex;
        data["sizey"] = this.sizey;
        data["minx"] = this.minx;
        data["miny"] = this.miny;
        data["maxx"] = this.maxx;
        data["maxy"] = this.maxy;
        data["filled"] = this.filled;
        data["anchorpoint_x"] = this.anchorpoint_x;
        data["anchorpoint_y"] = this.anchorpoint_y;
        data["transparent"] = this.transparent;
        data["transparentcolor"] = this.transparentcolor;
        data["character"] = this.character;
        data["font"] = this.font;
        return data;
    }
}

export interface ISymbolObj {
    refcount: number;
    numpoints: number;
    imagepath?: string | undefined;
    name?: string | undefined;
    type: number;
    inmapfile: number;
    sizex: number;
    sizey: number;
    minx: number;
    miny: number;
    maxx: number;
    maxy: number;
    filled: number;
    anchorpoint_x: number;
    anchorpoint_y: number;
    transparent: number;
    transparentcolor: number;
    character?: string | undefined;
    font?: string | undefined;
}